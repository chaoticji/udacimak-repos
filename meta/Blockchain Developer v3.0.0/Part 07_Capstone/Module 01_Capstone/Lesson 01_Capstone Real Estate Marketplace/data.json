{
  "data": {
    "lesson": {
      "id": 565250,
      "key": "d35b025b-01b3-4bd9-acf5-e8bb5b88f00c",
      "title": "Capstone: Real Estate Marketplace",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Apply your knowledge to build a decentralized housing project. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/d35b025b-01b3-4bd9-acf5-e8bb5b88f00c/565250/1555417532320/Capstone%3A+Real+Estate+Marketplace+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/d35b025b-01b3-4bd9-acf5-e8bb5b88f00c/565250/1555417529975/Capstone%3A+Real+Estate+Marketplace+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": {
        "key": "15c7ada0-2cd8-4b69-8b13-f6930e108a11",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 30240,
        "semantic_type": "Project",
        "title": "Capstone: Real Estate Marketplace",
        "description": "Gather your files and submit them via a zipped folder or a GitHub link. You can add all required external links inside a README.md file.\n\nBe sure you make sure you have completed the requirements.\n\nAlso, take a look at the rubric [here](https://review.udacity.com/#!/rubrics/1712/view) before submitting!",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "1712",
        "terminal_project_id": null,
        "resources": null,
        "image": {
          "url": "https://s3.amazonaws.com/video.udacity-data.com/topher/2016/September/57c9efaf_house-1-floorplan/house-1-floorplan.png",
          "width": 2730,
          "height": 2048
        }
      },
      "lab": null,
      "concepts": [
        {
          "id": 565276,
          "key": "4d2728c0-0886-4ba2-aa61-bf1362bc3664",
          "title": "Project Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4d2728c0-0886-4ba2-aa61-bf1362bc3664",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 840291,
              "key": "ea26515d-dfa5-405d-bf8a-68b20019f639",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Welcome! \n\nCongratulations on making it to the capstone of this course. In this project you will use the topics that you have learned in this program in combination with some new content to create a decentralized house listing service. ",
              "instructor_notes": ""
            },
            {
              "id": 839488,
              "key": "d51e6620-7034-47fb-930f-4379ccfcf053",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/September/57d5d1a2_townhouses/townhouses.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d51e6620-7034-47fb-930f-4379ccfcf053",
              "caption": "",
              "alt": "",
              "width": 500,
              "height": 500,
              "instructor_notes": null
            },
            {
              "id": 839489,
              "key": "4ac2ca3e-7043-480c-92d3-842a82dc2ffc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "At present, property titles are often paper-based, creating opportunities for errors and fraud. Title professionals find defects in 25% of all titles during the transaction process, according to the American Land Title Association. \n\nAny identified defect makes it illegal to transfer a property title to a buyer until it is rectified. This means property owners often incur high legal fees to ensure authenticity and accuracy of their property titles.\n\nMoreover, title fraud poses a risk to homeowners worldwide. US losses associated with title fraud reportedly averaged around $103,000 per case in 2015, compelling many property buyers to purchase title insurance.\n\nThese title management issues could potentially be mitigated by using blockchain technology to build immutable digital records of land titles and using blockchain for transparent transactions. This approach could simplify property title management, making it more transparent and helping to reduce the risk of title fraud and the need for additional insurance.\n\nSome companies and governments around the globe have already implemented blockchain technology for the title management process.\n\nGhanaian blockchain company Bitland has been working on a solution for Ghana, where it is estimated that almost 80% of land is unregistered, according to Forbes. Those that possess unregistered land find it more difficult to prove legal ownership, increasing their exposure to the risk of land seizures or property theft.\n\nBitland is seeking to create secure digital public records of ownership on its blockchain platform, with the aim of protecting land owners from title fraud. Bitland has expanded to operate in 7 African nations, India, and is also working with Native Americans in the US. \n\nIn this project you will be minting your own tokens to represent your title to the properties. Before you mint a token, you need to verify you own the property. You will use zk-SNARKs to create a verification system which  can prove you have title to the property without revealing that specific information on the property. We covered the basics on zk-SNARKs in Privacy lesson in Course 5\n\nOnce the token has been verified you will place it on a blockchain market place (OpenSea) for others to purchase. Let's get started!  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 839497,
          "key": "218592ad-ea20-4b39-ae73-a11ee459ea8e",
          "title": "OpenSea",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "218592ad-ea20-4b39-ae73-a11ee459ea8e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 840292,
              "key": "f265a007-4213-4790-bf18-7ddb74b8f860",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# OpenSea\n\nOpenSea is a decentralized marketplace that is used for selling for crypto assets such as CryptoKitties and other digital assets that are powered off Ethereum. On OpenSea, you can buy or sell any of these items through a smart contract, meaning that no central authority ever holds custody of your items. You can even check out the source code for this smart contract [here](https://etherscan.io/address/0x7be8076f4ea4a4ad08075c2508e481d6c946d12b).",
              "instructor_notes": ""
            },
            {
              "id": 840293,
              "key": "08b66e7d-d985-4788-b345-11cf29bc9f8b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/March/5c915168_opensea-logo-full-colored-blue/opensea-logo-full-colored-blue.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/08b66e7d-d985-4788-b345-11cf29bc9f8b",
              "caption": "",
              "alt": "",
              "width": 384,
              "height": 116,
              "instructor_notes": null
            },
            {
              "id": 839505,
              "key": "faaa7945-dda0-4398-b3a2-41bd7e57a786",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You will be using OpenSea in this project to list your property tokens for sale. In order to list a property, you'll need to go to the item on your account page. On the item detail page, click \"Sell\". This will walk you through the steps for selling an item. Note that the first time you auction an item, you will need to complete several MetaMask transactions in order to give the exchange contracts access to your items. After you complete these initial steps, creating an auction will only require signing a MetaMask message. This means that you can auction items without paying gas.",
              "instructor_notes": ""
            },
            {
              "id": 839499,
              "key": "81f850ed-effb-443d-ba0b-ca092db5d0b1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Resources\n\nhttps://docs.opensea.io/docs",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 839501,
          "key": "a431480a-c27c-437d-a911-8d442d2c8624",
          "title": "ZoKrates",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a431480a-c27c-437d-a911-8d442d2c8624",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 840295,
              "key": "46f04a2f-ff85-4ac1-9281-081b5c818c14",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# ZoKrates\n\nYou have learned about zkSnarks in [previous lesson](https://classroom.udacity.com/nanodegrees/nd1309/parts/8ccccdaa-79a3-443a-a03f-00cacd0277b7/modules/47d6cc21-fafe-406e-8370-e5ba23875da8/lessons/1190304c-4bbb-49e4-be0a-238b4e6f10bf/concepts/e4563a8e-fa74-4893-b6d7-75c6a49f57a7)\n\nSuccinct Zero-Knowledge proofs (zkSnarks) are proving to be one of the most promising frameworks for enhancing privacy and scalability in the blockchain space.\n\nProjects like Zcash are using zkSnarks to make payments anonymous (rather than pseudonymous). Other projects such as Coda are experimenting with trustless light clients by using recursive zkSnarks to dramatically reduce the number of state verifications blockchain clients have to perform when coming online. Ethereum founder, [Vitalik Buterin wrote how zkSnarks can be used to scale transaction speed on Ethereum](https://ethresear.ch/t/on-chain-scaling-to-potentially-500-tx-sec-through-mass-tx-validation/3477)\n\n\nIn this lesson you will learn how to implement zkSnarks using ZoKrates, a toolbox for zkSNARKs on Ethereum.\nTraditionally, snarks are written using NP complete arithmetic circuits which can be compared to writing assembly code in traditional machine programming. ZoKrates provides a higher level programming language (something like C in the same metaphor) which compiles down to the underlying constraint system and thus allows programmers to write snarks much closer to how they are used to programming.\n",
              "instructor_notes": ""
            },
            {
              "id": 840296,
              "key": "f15e1433-4134-4510-8ff9-dede6b0edf1b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/March/5c916148_687474703a2f2f7777772e726564616b74696f6e2e74752d6265726c696e2e64652f66696c6561646d696e2f66673330382f69636f6e732f70726f6a656b74652f6c6f676f732f5a6f4b72617465735f6c6f676f2e737667/687474703a2f2f7777772e726564616b74696f6e2e74752d6265726c696e2e64652f66696c6561646d696e2f66673330382f69636f6e732f70726f6a656b74652f6c6f676f732f5a6f4b72617465735f6c6f676f2e737667.svg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f15e1433-4134-4510-8ff9-dede6b0edf1b",
              "caption": "",
              "alt": "",
              "width": 300,
              "height": 300,
              "instructor_notes": null
            },
            {
              "id": 839504,
              "key": "c6f6bccf-e4e7-4340-922d-a83d40911410",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Getting Started with Zokrates\n\n### Step 1: Install Docker\n\nCurrently, Docker is the recommended way to get started with Zokrates. Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package. You can find instructions for installing it [here.](https://docs.docker.com/install/)\n\n### Step 2: Run ZoKrates\n\nRun ZoKrates docker container:\n\n`docker run -v <path to your project folder>:/home/zokrates/code -ti zokrates/zokrates /bin/bash`\n\nThis command breaks out into:\n\n`docker run` -  Run a docker container\n\n`-v <path to your project folder>:/home/zokrates/code` - Create a host mapped volume inside the container\n\n`-it`  - Connect the container to terminal\n\n`zokrates/zokrates` -  Pull the docker image from here: https://hub.docker.com/r/zokrates/zokrates\n\n`/bin/bash` - Run /bin/bash in the container\n\n### Step 3: A Quick Overview of the ZoKrates Process\n\n",
              "instructor_notes": ""
            },
            {
              "id": 840301,
              "key": "ac54a5b4-6f23-4b09-99c1-9d0afbd84c1e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/March/5c9178bd_zokrates-process/zokrates-process.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ac54a5b4-6f23-4b09-99c1-9d0afbd84c1e",
              "caption": "",
              "alt": "",
              "width": 500,
              "height": 400,
              "instructor_notes": null
            },
            {
              "id": 840303,
              "key": "def7b30d-ebe8-4306-9b3e-bb375ff98525",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the following zkSNARKs example(s) we shall use the ZoKrates framework.\n\nThis is a 5 step process:\n\n1. Compile Program\n2. Trusted Setup\n3. Compute-Witness\n4. Generate-Proof\n5. Export-Verifier\n\n\n## Input file(s)\n* program_name.code\n\n\n## Output file(s)\n* out.code\n* out\n* proving.key\n* verification.key\n* variables.inf\n* witness\n* proof.json\n* verifier.sol",
              "instructor_notes": ""
            },
            {
              "id": 840302,
              "key": "0d957dcb-e902-45d3-9fe2-72fc6b7d69eb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/March/5c9178fe_zokrates-architecture/zokrates-architecture.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0d957dcb-e902-45d3-9fe2-72fc6b7d69eb",
              "caption": "",
              "alt": "",
              "width": 800,
              "height": 300,
              "instructor_notes": null
            },
            {
              "id": 840304,
              "key": "2504918c-08ad-4cc7-a422-9927ff7b01c5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 4: Compile the program written in ZoKrates DSL\n\n`/path/to/zokrates compile -i <program_name>.code`\n\n### Step 5: Generate the Trusted Setup\n\nNow take the 'flattened' code, which is a circuit and go through a 'trusted setup'\nRepeat this process, every-time the program.code changes\nTwo keys are generated - 'proving.key' and 'verification.key'\n\n`/path/to/zokrates setup`\n\n### Step 6: Compute Witness\n\nHaving gone through the 'trusted setup' let's compute our 'witness' who knows the answer\nand it generates a witness file with computation steps\n\n`/path/to/zokrates compute-witness -a <a> <b> ... <n>`\n\n### Step 7: Generate Proof\n\nNext step is to 'generate our proof' based on the above 'witness'\nA `proof.json` file is generated in this step\n\n`/path/to/zokrates generate-proof`\n\n### Step 8: Export Verifier\n\nLast but never the least, let's generate our 'verifier' smart contract\n\n`path/to/zokrates export-verifier`\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 841261,
              "key": "c723cf8a-0269-4922-9d1d-c0a3cba2d01b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Commands for project: **square.code**\n\nThe boiler plate code for `square.code` is provided to help your accelerated learning, you will need to fill out the missing variables before continuing on.  Below is a walkthrough of examples so you are able to compare to the outputs to make sure everything is working.\n\nGo through the steps by executing the following commands\n\n`docker run -v /path/to/zokrates/zokrates/code:/home/zokrates/code -ti zokrates/zokrates /bin/bash`\n```\nzokrates@ec46fd6b5c34:~$\n```\n`cd code/square`\n```\nzokrates@ec46fd6b5c34:~/code/square$\n```\n`~/zokrates compile -i square.code`\n```\nCompiling square.code\nCompiled program:\ndef main(private _2,_3):\n        _4 = (_2 * _2)\n        _5 = (_4 - _3)\n        # _6, _7 = Rust::ConditionEq(_5)\n        _6 == (_5 * _7)\n        _8 = (1 - _6)\n        0 == (_8 * _5)\n        # _9 = Rust::Identity(_8)\n        _10 = (1 - _9)\n        _11 = (_9 * 1)\n        _12 = (_10 * 0)\n        _13 = (_11 + _12)\n        return _13\nCompiled code written to 'out'\nHuman readable code to 'out.code'\nNumber of constraints: 12\n```\n`~/zokrates setup`\n```\nPerforming setup...\ndef main(private _2,_3):\n        _4 = (_2 * _2)\n        _5 = (_4 - _3)\n        # _6, _7 = Rust::ConditionEq(_5)\n        _6 == (_5 * _7)\n        _8 = (1 - _6)\n        0 == (_8 * _5)\n        # _9 = Rust::Identity(_8)\n        _10 = (1 - _9)\n        _11 = (_9 * 1)\n        _12 = (_10 * 0)\n        _13 = (_11 + _12)\n        return _13\nnum variables: 14\nnum constraints: 10\nnum inputs: 2\nSwap is not beneficial, not performing\n* QAP number of variables: 13\n* QAP pre degree: 10\n* QAP degree: 16\n* QAP number of input variables: 2\n* G1 window: 5\n* G2 window: 1\n* G1 elements in PK: 109\n* Non-zero G1 elements in PK: 83\n* G2 elements in PK: 15\n* Non-zero G2 elements in PK: 5\n* PK size in bits: 25438\n* G1 elements in VK: 4\n* G2 elements in VK: 5\n* VK size in bits: 3948\n        Verification key in Solidity compliant format:{\n                vk.A = Pairing.G2Point([0x1b10d49529b9fdb453db13c92e84ab5dc45334453042191e478b4af992319a14, 0x46eb90b54936dd919ec0bc78841dab711a4f79b8f362d1bf5be1f20f707a8b2], [0xe49b9c594d9e62f24a2a297054816ea2c91df4fb3e38640e66de63cfd817e8d, 0x9dcd6d2181b6036cc0e6e7f7a6b4fbbd687df1d389456c4e8f867e4cb88fbbd]);\n                vk.B = Pairing.G1Point(0xe6def06b94364c38e5b7984ccdb60023c48b5bd8e991c05997fe9333b04158f, 0xcc9860476d5fc85ab2ec2b409cc2210a76929845f73205f957880bb3b16ecd8);\n                vk.C = Pairing.G2Point([0x10e32a50bc3260c7febf42975de3650fe4a7139bd0257d21733a9ced3ff390c1, 0x1bd239069e98b09e76e6c132b38d013f6ec8915b7da57db6b455fc290bf471bb], [0x27591b27d811d8c2b62d03c179f91dbb7f2d24bb17add3d63b994b7f89514150, 0x2a9ec752977ffc91e31cd27f9cbbb3ad911e262eb5f8c7ede68d6ebc3a92f8a5]);\n                vk.gamma = Pairing.G2Point([0x1f0c6a2f09a9670bf6c7d972e95c6e5a930142cefeea38e4a87f24921ac2592d, 0x4f331535b42f312a87d12b1047ba5a988731ff64c66b06b60430481882d0d88], [0x1f43a3146ad6acfc9dac398a7f4e371dc04083b276a1d0f4d3328d9593d9aa99, 0x2a8b26dad1546f3e2e0608e7404d4c3e2a62dda46e9ef60b87f4da1737c306ad]);\n                vk.gammaBeta1 = Pairing.G1Point(0x37b0008f481e55f95dba689e98d4aaa6b71ae388a3894c7c29ce70e0d9a68f1, 0x28581ffa3f9e9ccc7e326e28fb631f66a99b3765de414d0dcc14744e503288c5);\n                vk.gammaBeta2 = Pairing.G2Point([0x2a3576b33a12081980916faf04f10da2303dbc02997243ac504310a4280a6a82, 0x41037b2c7f4e47443ae93edfcf3f0567f6efab375490fc623fcb43ddd43fc8], [0x2fda20f1bf8bb0582dc6d86ab5e54e642dcbc84a6c2dd8946d2e9a264e85218b, 0x17c4835f6f0187700e3db9011de120096b6a2cc70ccad3f4316b46a36f665cc3]);\n                vk.Z = Pairing.G2Point([0x2c24ab08b2553394d1bf14eea008cf048cfd04a76985520f7298cf3193a83b94, 0x2a78e1cead84d701d260b4501bc10f8484a4634af0804f7618f5d4d5810264c0], [0x9bc0f8c060d83b583f26c6246e73542ed2508f540bd1d8a6fd76c613b7539ac, 0x13d754c72b2bd74366f90e0820de110b131d7cb4938ca7bd32fbdd7692d72f8f]);\n                vk.IC = new Pairing.G1Point[](3);\n                vk.IC[0] = Pairing.G1Point(0x22b868e2f6fb09d53ecd062cea60d26b1ab399850dbc6884d27d2635819508a2, 0x282098aeb5ff8fda56c6c706b16a8ff48c0252baf2e5eba3dcd1244f0dd35ed7);\n                vk.IC[1] = Pairing.G1Point(0x121a1b6b5d1b609797437a11887c852395552ca480d0628a820b0b497ffd7bb8, 0x2f21165ef531364662970aedf0709ca52dacbc993e6e4f8e1e9dd55372ea6a78);\n                vk.IC[2] = Pairing.G1Point(0xf10b3c22875fbe19c4fe8566ef1c69c4ba33cd6080a6caa8a5839a8ad0378c5, 0xebde646e2e341e1179d2d0f6a8810592f2dd41b99c0a586a014ca9b12fb5fdd);\n                }\nsetup successful: true\n```\n`~/zokrates compute-witness -a 3 9`\n```\nComputing witness for:\ndef main(private _2,_3):\n        _4 = (_2 * _2)\n        _5 = (_4 - _3)\n        # _6, _7 = Rust::ConditionEq(_5)\n        _6 == (_5 * _7)\n        _8 = (1 - _6)\n        0 == (_8 * _5)\n        # _9 = Rust::Identity(_8)\n        _10 = (1 - _9)\n        _11 = (_9 * 1)\n        _12 = (_10 * 0)\n        _13 = (_11 + _12)\n        return _13\n\nWitness:\n\n~out_0 1\n```\n`~/zokrates generate-proof`\n```\nGenerating proof...\nUsing Witness: {\"_8\": 1, \"~one\": 1, \"_2\": 3, \"_7\": 1, \"_13\": 1, \"_3\": 9, \"_9\": 1, \"_6\": 0, \"~out_0\": 1, \"_10\": 0, \"_11\": 1, \"_12\": 0, \"_5\": 0, \"_4\": 9}\nPublic inputs: [1, 9, 1]\nPrivate inputs: [3, 9, 0, 1, 0, 1, 0, 1, 1, 0, 1]\n* Elements of w skipped: 3 (33.33%)\n* Elements of w processed with special addition: 4 (44.44%)\n* Elements of w remaining: 2 (22.22%)\n* Elements of w skipped: 1 (33.33%)\n* Elements of w processed with special addition: 1 (33.33%)\n* Elements of w remaining: 1 (33.33%)\n* Elements of w skipped: 4 (36.36%)\n* Elements of w processed with special addition: 5 (45.45%)\n* Elements of w remaining: 2 (18.18%)\n* Elements of w skipped: 4 (30.77%)\n* Elements of w processed with special addition: 6 (46.15%)\n* Elements of w remaining: 3 (23.08%)\n* G1 elements in proof: 7\n* G2 elements in proof: 1\n* Proof size in bits: 2294\nProof:\nA = Pairing.G1Point(0x10011bb0ae2830e7aac3a8018a35cb5bcf7e9b7e1f1f978659617bb8963dc9eb, 0x1e1bfa48eea252e9af7a640692efd7a9621196f199449297eb15f0de55f48e2);\nA_p = Pairing.G1Point(0x208b8d0290c0aae78f7a68e4eeb279d5acef98440f6362f89be509dfb30cac7b, 0x13483c8e6250415dc769d1df23ebd0685e706dc9ccb8a6531656ac752d1c38be);\nB = Pairing.G2Point([0xdbbdb9a1b3840a906e4e8c45262331c4b6ef4331f72a5febcb2b9bb0ae0ad93, 0x1f8f59715f8bed2d88f7424a185d126caada6510ee9c58931fbf8ce41e0226e4], [0x26050966f8c53a0ede7802029b7480445299a60c6668398c2710c94130513927, 0x15357ed970d284c59adf8ea5e2cec0afc3ca037ab88b7d77538f73b87e652307]);\nB_p = Pairing.G1Point(0x2e3a1b6396d4ba1e4b8534770686f936f6fd7263a482e6ea21d7a71f6fc1b38a, 0x291bc498d964af16a6c0a43faf69370d901d59045eaf9e9480f630c2796e44b1);\nC = Pairing.G1Point(0x345efb9b94c2e35ddb250ae37d7b9d9bca1ca25ed015f2866291ef5b56bceed, 0xcf8e6bc23944b5c8877dfcd4d19dc131dc41f366ed95b3d7d654642f02a60cb);\nC_p = Pairing.G1Point(0xcf6854e67af66797ea0b4f199b17dd2297a46c772d554a61b47a05ec0c7eaf0, 0x2824aec96561b59ec9dafe69b84873a7b2976d809187f8a2db1875ac794b0e3e);\nH = Pairing.G1Point(0x21e5e352a944783143e0bae49067d07e447e091fdaaa1e5b8db52204762b5932, 0x24daf7d76d6cda133ea472e8ffe212b4dd28b1f30927d979eefb3b743488e441);\nK = Pairing.G1Point(0x14c4c91906fdabe4bc5fc90fd94f4d2828de747f910beac74c7362245f515595, 0x17792bd44e9fa943517b6586c452734e438bf3e0e5c09e89054e540cec76e0e8);\ngenerate-proof successful: true\n```\n`~/zokrates export-verifier`\n```\nExporting verifier...\nFinished exporting verifier.\n```\n\n### verifier.sol\n\n```\n// This file is MIT Licensed.\n//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npragma solidity ^0.4.14;\nlibrary Pairing {\n    struct G1Point {\n        uint X;\n        uint Y;\n    }\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint[2] X;\n        uint[2] Y;\n    }\n    /// @return the generator of G1\n    function P1() pure internal returns (G1Point) {\n        return G1Point(1, 2);\n    }\n    /// @return the generator of G2\n    function P2() pure internal returns (G2Point) {\n        return G2Point(\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\n        );\n    }\n    /// @return the negation of p, i.e. p.addition(p.negate()) should be zero.\n    function negate(G1Point p) pure internal returns (G1Point) {\n        // The prime q in the base field F_q for G1\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n        if (p.X == 0 && p.Y == 0)\n            return G1Point(0, 0);\n        return G1Point(p.X, q - (p.Y % q));\n    }\n    /// @return the sum of two points of G1\n    function addition(G1Point p1, G1Point p2) internal returns (G1Point r) {\n        uint[4] memory input;\n        input[0] = p1.X;\n        input[1] = p1.Y;\n        input[2] = p2.X;\n        input[3] = p2.Y;\n        bool success;\n        assembly {\n            success := call(sub(gas, 2000), 6, 0, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n        require(success);\n    }\n    /// @return the product of a point on G1 and a scalar, i.e.\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\n    function scalar_mul(G1Point p, uint s) internal returns (G1Point r) {\n        uint[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s;\n        bool success;\n        assembly {\n            success := call(sub(gas, 2000), 7, 0, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n        require (success);\n    }\n    /// @return the result of computing the pairing check\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\n    /// return true.\n    function pairing(G1Point[] p1, G2Point[] p2) internal returns (bool) {\n        require(p1.length == p2.length);\n        uint elements = p1.length;\n        uint inputSize = elements * 6;\n        uint[] memory input = new uint[](inputSize);\n        for (uint i = 0; i < elements; i++)\n        {\n            input[i * 6 + 0] = p1[i].X;\n            input[i * 6 + 1] = p1[i].Y;\n            input[i * 6 + 2] = p2[i].X[0];\n            input[i * 6 + 3] = p2[i].X[1];\n            input[i * 6 + 4] = p2[i].Y[0];\n            input[i * 6 + 5] = p2[i].Y[1];\n        }\n        uint[1] memory out;\n        bool success;\n        assembly {\n            success := call(sub(gas, 2000), 8, 0, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n        require(success);\n        return out[0] != 0;\n    }\n    /// Convenience method for a pairing check for two pairs.\n    function pairingProd2(G1Point a1, G2Point a2, G1Point b1, G2Point b2) internal returns (bool) {\n        G1Point[] memory p1 = new G1Point[](2);\n        G2Point[] memory p2 = new G2Point[](2);\n        p1[0] = a1;\n        p1[1] = b1;\n        p2[0] = a2;\n        p2[1] = b2;\n        return pairing(p1, p2);\n    }\n    /// Convenience method for a pairing check for three pairs.\n    function pairingProd3(\n            G1Point a1, G2Point a2,\n            G1Point b1, G2Point b2,\n            G1Point c1, G2Point c2\n    ) internal returns (bool) {\n        G1Point[] memory p1 = new G1Point[](3);\n        G2Point[] memory p2 = new G2Point[](3);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        return pairing(p1, p2);\n    }\n    /// Convenience method for a pairing check for four pairs.\n    function pairingProd4(\n            G1Point a1, G2Point a2,\n            G1Point b1, G2Point b2,\n            G1Point c1, G2Point c2,\n            G1Point d1, G2Point d2\n    ) internal returns (bool) {\n        G1Point[] memory p1 = new G1Point[](4);\n        G2Point[] memory p2 = new G2Point[](4);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p1[3] = d1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        p2[3] = d2;\n        return pairing(p1, p2);\n    }\n}\ncontract Verifier {\n    using Pairing for *;\n    struct VerifyingKey {\n        Pairing.G2Point A;\n        Pairing.G1Point B;\n        Pairing.G2Point C;\n        Pairing.G2Point gamma;\n        Pairing.G1Point gammaBeta1;\n        Pairing.G2Point gammaBeta2;\n        Pairing.G2Point Z;\n        Pairing.G1Point[] IC;\n    }\n    struct Proof {\n        Pairing.G1Point A;\n        Pairing.G1Point A_p;\n        Pairing.G2Point B;\n        Pairing.G1Point B_p;\n        Pairing.G1Point C;\n        Pairing.G1Point C_p;\n        Pairing.G1Point K;\n        Pairing.G1Point H;\n    }\n    function verifyingKey() pure internal returns (VerifyingKey vk) {\n        vk.A = Pairing.G2Point([0x1b10d49529b9fdb453db13c92e84ab5dc45334453042191e478b4af992319a14, 0x46eb90b54936dd919ec0bc78841dab711a4f79b8f362d1bf5be1f20f707a8b2], [0xe49b9c594d9e62f24a2a297054816ea2c91df4fb3e38640e66de63cfd817e8d, 0x9dcd6d2181b6036cc0e6e7f7a6b4fbbd687df1d389456c4e8f867e4cb88fbbd]);\n        vk.B = Pairing.G1Point(0xe6def06b94364c38e5b7984ccdb60023c48b5bd8e991c05997fe9333b04158f, 0xcc9860476d5fc85ab2ec2b409cc2210a76929845f73205f957880bb3b16ecd8);\n        vk.C = Pairing.G2Point([0x10e32a50bc3260c7febf42975de3650fe4a7139bd0257d21733a9ced3ff390c1, 0x1bd239069e98b09e76e6c132b38d013f6ec8915b7da57db6b455fc290bf471bb], [0x27591b27d811d8c2b62d03c179f91dbb7f2d24bb17add3d63b994b7f89514150, 0x2a9ec752977ffc91e31cd27f9cbbb3ad911e262eb5f8c7ede68d6ebc3a92f8a5]);\n        vk.gamma = Pairing.G2Point([0x1f0c6a2f09a9670bf6c7d972e95c6e5a930142cefeea38e4a87f24921ac2592d, 0x4f331535b42f312a87d12b1047ba5a988731ff64c66b06b60430481882d0d88], [0x1f43a3146ad6acfc9dac398a7f4e371dc04083b276a1d0f4d3328d9593d9aa99, 0x2a8b26dad1546f3e2e0608e7404d4c3e2a62dda46e9ef60b87f4da1737c306ad]);\n        vk.gammaBeta1 = Pairing.G1Point(0x37b0008f481e55f95dba689e98d4aaa6b71ae388a3894c7c29ce70e0d9a68f1, 0x28581ffa3f9e9ccc7e326e28fb631f66a99b3765de414d0dcc14744e503288c5);\n        vk.gammaBeta2 = Pairing.G2Point([0x2a3576b33a12081980916faf04f10da2303dbc02997243ac504310a4280a6a82, 0x41037b2c7f4e47443ae93edfcf3f0567f6efab375490fc623fcb43ddd43fc8], [0x2fda20f1bf8bb0582dc6d86ab5e54e642dcbc84a6c2dd8946d2e9a264e85218b, 0x17c4835f6f0187700e3db9011de120096b6a2cc70ccad3f4316b46a36f665cc3]);\n        vk.Z = Pairing.G2Point([0x2c24ab08b2553394d1bf14eea008cf048cfd04a76985520f7298cf3193a83b94, 0x2a78e1cead84d701d260b4501bc10f8484a4634af0804f7618f5d4d5810264c0], [0x9bc0f8c060d83b583f26c6246e73542ed2508f540bd1d8a6fd76c613b7539ac, 0x13d754c72b2bd74366f90e0820de110b131d7cb4938ca7bd32fbdd7692d72f8f]);\n        vk.IC = new Pairing.G1Point[](3);\n        vk.IC[0] = Pairing.G1Point(0x22b868e2f6fb09d53ecd062cea60d26b1ab399850dbc6884d27d2635819508a2, 0x282098aeb5ff8fda56c6c706b16a8ff48c0252baf2e5eba3dcd1244f0dd35ed7);\n        vk.IC[1] = Pairing.G1Point(0x121a1b6b5d1b609797437a11887c852395552ca480d0628a820b0b497ffd7bb8, 0x2f21165ef531364662970aedf0709ca52dacbc993e6e4f8e1e9dd55372ea6a78);\n        vk.IC[2] = Pairing.G1Point(0xf10b3c22875fbe19c4fe8566ef1c69c4ba33cd6080a6caa8a5839a8ad0378c5, 0xebde646e2e341e1179d2d0f6a8810592f2dd41b99c0a586a014ca9b12fb5fdd);\n    }\n    function verify(uint[] input, Proof proof) internal returns (uint) {\n        VerifyingKey memory vk = verifyingKey();\n        require(input.length + 1 == vk.IC.length);\n        // Compute the linear combination vk_x\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\n        for (uint i = 0; i < input.length; i++)\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\n        if (!Pairing.pairingProd2(proof.A, vk.A, Pairing.negate(proof.A_p), Pairing.P2())) return 1;\n        if (!Pairing.pairingProd2(vk.B, proof.B, Pairing.negate(proof.B_p), Pairing.P2())) return 2;\n        if (!Pairing.pairingProd2(proof.C, vk.C, Pairing.negate(proof.C_p), Pairing.P2())) return 3;\n        if (!Pairing.pairingProd3(\n            proof.K, vk.gamma,\n            Pairing.negate(Pairing.addition(vk_x, Pairing.addition(proof.A, proof.C))), vk.gammaBeta2,\n            Pairing.negate(vk.gammaBeta1), proof.B\n        )) return 4;\n        if (!Pairing.pairingProd3(\n                Pairing.addition(vk_x, proof.A), proof.B,\n                Pairing.negate(proof.H), vk.Z,\n                Pairing.negate(proof.C), Pairing.P2()\n        )) return 5;\n        return 0;\n    }\n    event Verified(string s);\n    function verifyTx(\n            uint[2] a,\n            uint[2] a_p,\n            uint[2][2] b,\n            uint[2] b_p,\n            uint[2] c,\n            uint[2] c_p,\n            uint[2] h,\n            uint[2] k,\n            uint[2] input\n        ) public returns (bool r) {\n        Proof memory proof;\n        proof.A = Pairing.G1Point(a[0], a[1]);\n        proof.A_p = Pairing.G1Point(a_p[0], a_p[1]);\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.B_p = Pairing.G1Point(b_p[0], b_p[1]);\n        proof.C = Pairing.G1Point(c[0], c[1]);\n        proof.C_p = Pairing.G1Point(c_p[0], c_p[1]);\n        proof.H = Pairing.G1Point(h[0], h[1]);\n        proof.K = Pairing.G1Point(k[0], k[1]);\n        uint[] memory inputValues = new uint[](input.length);\n        for(uint i = 0; i < input.length; i++){\n            inputValues[i] = input[i];\n        }\n        if (verify(inputValues, proof) == 0) {\n            emit Verified(\"Transaction successfully verified.\");\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 840294,
              "key": "cd44c9d5-73ad-414e-9d73-00b3cac853e9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Resources\n\n[Official ZoKrates](https://github.com/Zokrates/ZoKrates)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 839491,
          "key": "5feee81f-451f-448e-a832-0fec8bb43359",
          "title": "Project Materials",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5feee81f-451f-448e-a832-0fec8bb43359",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 839492,
              "key": "7dbaeac1-c7f8-4085-8d6d-813492131afb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Steps\n-----\n\n1. [Clone the project repository](https://github.com/udacity/Blockchain-Capstone)\n2. Explore the code base.\n3. Fill out ERC721 Mintable Contract in `ERC721Mintable.sol`\n4. Write test cases `TestERC721Mintable.js`\n5. Compile and pass test cases in `TestERC721Mintable.js`\n6. Implement Zokrates\n * Using Docker to install and instantiate a Zokrates zkSnarks development environment\n * Completes the Zokrates proof in square.code by adding the variable names in `square.code`\n * Compile program\n * Trusted setup\n * Compute witness\n * Generate Proof\n * Export Verifier.sol\n * Note: This project uses solidity version 0.5.2 so you will be required to update the code in Verifier.sol accordingly based on the compiler errors you receive\n7. Write a test script to verify the solidity contract generated by Zokrates executed successfully - `TestSquareVerifier.js`\n8.  Write test contract for ZK and ERC721 integration - `SolnSquareVerifier.sol`\n9. Compile and pass with `TestSolnSquareVerifier.js`\n10. Deploy latest contracts generated by Zokrates (a.k.a verifier.sol) \n11. Deploy SolnSquareVerifier contract  to Rinkeby network\n12. Mint 10 tokens\n13. Generate OpenSea marketplace\n14. Test and Verify OpenSea with your SolnSquareVerifier tokens\n * List 5 of your tokens on the marketplace\n * Purchase those 5 tokens using a different address\n15. Complete required documentation and submit!\n",
              "instructor_notes": ""
            },
            {
              "id": 839493,
              "key": "a9bebef6-96aa-49a4-8e58-da5298e1a508",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Video Overview\n\n#### Contracts",
              "instructor_notes": ""
            },
            {
              "id": 841383,
              "key": "4dcd10ff-277a-44f3-ba36-07513d9e10eb",
              "title": "BC Capstone Contracts SC-WT",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "G20LiNTABDo",
                "china_cdn_id": "G20LiNTABDo.mp4"
              }
            },
            {
              "id": 841384,
              "key": "b4693f05-794d-401b-9955-3089e972363a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Square Code",
              "instructor_notes": ""
            },
            {
              "id": 841386,
              "key": "f7f2f9cd-426e-4a22-8841-783b07190de6",
              "title": "BC Capstone Square Code SC-WT",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WuEOrAtvHVM",
                "china_cdn_id": "WuEOrAtvHVM.mp4"
              }
            },
            {
              "id": 841385,
              "key": "6470eabe-cf49-410b-80ef-9017000d957d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Truffle Test",
              "instructor_notes": ""
            },
            {
              "id": 841387,
              "key": "5d6d8df4-deb5-4a9b-86bb-26f58a36c72d",
              "title": "BC Capstone Truffle Test SC-WT",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "oGak3PczoHU",
                "china_cdn_id": "oGak3PczoHU.mp4"
              }
            },
            {
              "id": 839498,
              "key": "dcb86aa5-3552-4615-8442-9ac55e2230a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Resources\n\n* [Remix - Solidity IDE](https://remix.ethereum.org/)\n* [Visual Studio Code](https://code.visualstudio.com/)\n* [Truffle Framework](https://truffleframework.com/)\n* [Ganache - One Click Blockchain](https://truffleframework.com/ganache)\n* [Open Zeppelin ](https://openzeppelin.org/)\n* [Interactive zero knowledge 3-colorability demonstration](http://web.mit.edu/~ezyang/Public/graph/svg.html)\n* [Docker](https://docs.docker.com/install/)\n* [ZoKrates](https://github.com/Zokrates/ZoKrates)",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}