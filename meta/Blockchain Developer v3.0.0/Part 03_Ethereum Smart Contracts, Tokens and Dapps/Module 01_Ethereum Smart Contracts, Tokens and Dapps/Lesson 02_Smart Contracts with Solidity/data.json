{
  "data": {
    "lesson": {
      "id": 778477,
      "key": "70703034-f10d-45a9-9979-fa8afc8ea42c",
      "title": "Smart Contracts with Solidity",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn the basics of the Solidity language which used to write smart contracts. Then put it all together to create your very own token!",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/70703034-f10d-45a9-9979-fa8afc8ea42c/778477/1555417435020/Smart+Contracts+with+Solidity+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/70703034-f10d-45a9-9979-fa8afc8ea42c/778477/1555417426906/Smart+Contracts+with+Solidity+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 779662,
          "key": "8cc22a88-a509-45bd-981b-e04d0e0a8773",
          "title": "Let's Write Smart Contracts",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8cc22a88-a509-45bd-981b-e04d0e0a8773",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783861,
              "key": "c0fcda0c-74ce-489a-ba37-0d708bd5c9a9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Welcome to an Introduction to Solidity\n---\nIn this lesson, we will guide you through the basics of Solidity, the language used to develop smart contracts in the Ethereum platform. By the end, you'll get to tie all the topics together to create your very own token. \n\nWe've broken out the lesson by commonly used Solidity concepts such as data types, mappings, structs, and more; so feel free to skip to topics if you are already familiar with them or jump directly to topics you'd like more review on.\n\nLet's get started!",
              "instructor_notes": ""
            },
            {
              "id": 783666,
              "key": "6fcb3a77-13fe-4a85-a454-4a503a1ca693",
              "title": "C4L3-01 Lesson Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Q46xjAxGIYw",
                "china_cdn_id": "Q46xjAxGIYw.mp4"
              }
            },
            {
              "id": 783678,
              "key": "2092c491-532e-473b-9b8d-e73c4a0e0177",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Objectives\n---\n*In this lesson, you will:*\n- Create contracts that use fundamental Solidity concepts and deploy them in Remix\n- Send ethers from one account to another account using Global Variables\n- Use Infura and Truffle to create own ERC-20 tokens that you can send to friends \n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 783999,
              "key": "896e4f25-ccd6-4530-a51d-1a41e7c9e240",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/896e4f25-ccd6-4530-a51d-1a41e7c9e240",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784001,
              "key": "e4ce3308-c7b7-431b-9249-1dd831d4ce93",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Mini Project\n---\nAt the end of this lesson, you will use the ERC-20 interface to **create your own tokens** and then send 10 tokens to Udacity's Ethereum Address!",
              "instructor_notes": ""
            },
            {
              "id": 784000,
              "key": "0438195a-6089-4ae9-b86b-164ceb9a483e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Resources\n---\n#### Solidity Documentation\nRemember the full Solidity documentation is always a useful resource. \n> [Solidity documentation](https://solidity.readthedocs.io/en/v0.4.24/) is always useful resource. \n\nUse the drop down in the left-panel to change the version, language, download the docs and much more: \n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 784105,
              "key": "3d01a70e-702b-4042-b4f2-fcdaf49dbec2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/November/5bef8928_screen-shot-2018-11-16-at-7.17.02-pm/screen-shot-2018-11-16-at-7.17.02-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3d01a70e-702b-4042-b4f2-fcdaf49dbec2",
              "caption": "You can use the drop down on the left-side panel in the documentation to change the version, change language, download the docs and much more. ",
              "alt": "",
              "width": 200,
              "height": 200,
              "instructor_notes": null
            },
            {
              "id": 784106,
              "key": "c0e0c00e-e512-4613-9e7e-40f4bff7db08",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Github Source Code Link\nThroughout this lesson, we'll be work on code examples you can test using Remix and can be found here: \n> [Introduction to Solidity Lesson - Github Repo](https://github.com/udacity/nd1309-work-code/tree/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity)\n\nIf you feel more comfortable testing the tests Smart Contracts in Truffle you can find the same contracts in here:\n>[Truffle Project Smart Contracts](https://github.com/udacity/nd1309-work-code/tree/master/Course_Identity_And_Smart_Contracts/solidity) ",
              "instructor_notes": ""
            },
            {
              "id": 814705,
              "key": "1fbace38-73ad-46bb-9181-371728ab5418",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1fbace38-73ad-46bb-9181-371728ab5418",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814706,
              "key": "b020d002-7cd0-4e50-a438-70747540d6c1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\n\nThe videos in this lesson were recorded using a version that it is outdated, the code below in the \"Instructor Code\" section has been updated.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 778445,
          "key": "81f7d885-9e2e-488b-b680-61547b6cd059",
          "title": "Smart Contracts and Solidity Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "81f7d885-9e2e-488b-b680-61547b6cd059",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783136,
              "key": "4f3a24c2-3972-4418-bfd8-39410acaf42e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Smart Contracts and Solidity Introduction\n---\nBefore we dive into writing smart contracts, let's step back and review the basics of a smart contract in Ethereum. We will cover their purpose, their properties, and what languages can be used to write them. \n",
              "instructor_notes": ""
            },
            {
              "id": 778444,
              "key": "47133662-7157-4125-b778-5681e82ae723",
              "title": "C4L3 Concept 2 Part1 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tI2YSDI1rAE",
                "china_cdn_id": "tI2YSDI1rAE.mp4"
              }
            },
            {
              "id": 784004,
              "key": "319ebf00-8e87-476f-8c7d-7ae9e0a40197",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/319ebf00-8e87-476f-8c7d-7ae9e0a40197",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784002,
              "key": "d12621d0-6f29-4605-b7d8-cee5c1a85b62",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Smart Contract Lifecycle and Layout\n---\nNow that we have the basics down, it's important to understand what properties and purpose smart contracts have at each stage of the lifecycle. \nAlso, we will see the layout of a typical smart contract. \n",
              "instructor_notes": ""
            },
            {
              "id": 781916,
              "key": "715c65f1-9555-4dd1-8465-da7619d2dc88",
              "title": "C4L3 Concept 2 Part2 V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DtOOiPevC3k",
                "china_cdn_id": "DtOOiPevC3k.mp4"
              }
            },
            {
              "id": 784003,
              "key": "3f2b9d2c-7819-44ba-a7b2-7ae2f1171f27",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Smart Contract Lifecycle\n---\n- **Develop** - Write the contract and compile. \n- **Deploy** - Once deployed, the smart contract is un-editable. After deploying on any network (e.g. mainnet, testnet), you get an address specific to where contract was deployed.  \n- **Invoke** - Use the address created after the smart contract is deployed to invoke contract to call functions on it.\n- **Destroy** - Once a contract has finished its purpose, it is important to destroy it so no one can call functions on it anymore. Remember that smart contracts cannot be edited once deployed. Also, often smart contracts are tied to funds, so keeping it around if it is no longer used puts these funds at risk. ",
              "instructor_notes": ""
            },
            {
              "id": 784102,
              "key": "f1066f65-d848-4dcc-ad60-37413cb7b4a4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f1066f65-d848-4dcc-ad60-37413cb7b4a4",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784103,
              "key": "beacd7d7-e908-48ed-8ff5-844354665509",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Resources\n---\n#### Solidity Documentation\n>[Solidity documentation - Contracts](https://solidity.readthedocs.io/en/v0.5.3/contracts.html)\n",
              "instructor_notes": ""
            },
            {
              "id": 784104,
              "key": "bc833aa9-d914-4481-a3d3-eb4f5b876c55",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bc833aa9-d914-4481-a3d3-eb4f5b876c55",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778522,
              "key": "c68a61f1-4521-4470-b9b9-f6e78f0abd88",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c68a61f1-4521-4470-b9b9-f6e78f0abd88",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Smart Contracts written in Solidity, are declared with the keyword:",
                "answers": [
                  {
                    "id": "a1541199997023",
                    "text": "contract",
                    "is_correct": true
                  },
                  {
                    "id": "a1541200028519",
                    "text": "class",
                    "is_correct": false
                  },
                  {
                    "id": "a1541200032901",
                    "text": "function",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778525,
              "key": "c67fc8b2-1a87-4cc1-ab58-fee07d1501b4",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c67fc8b2-1a87-4cc1-ab58-fee07d1501b4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Smart Contracts can have variable declarations outside any function.",
                "answers": [
                  {
                    "id": "a1541200205037",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541200229034",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778528,
              "key": "fb53f152-f919-42be-8f03-81ace54936e2",
              "title": "3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fb53f152-f919-42be-8f03-81ace54936e2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Smart Contracts can have a constructor function.\n",
                "answers": [
                  {
                    "id": "a1541200352754",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541200361496",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 778448,
          "key": "bd84915a-40d6-4f79-a728-4d36c08157f4",
          "title": "Remix Online Tool",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bd84915a-40d6-4f79-a728-4d36c08157f4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783137,
              "key": "81e8259d-a655-4d0d-af46-61cdec96d0c6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Remix Online Tool\n---\nLet's explore [Remix](https://remix.ethereum.org/), the online editor for smart contracts which we will use throughout this lesson.\n\nWe will discuss these features in Remix:\n- Which environment to choose when deploying a contract:\n- Choosing different compiler versions in Solidity\n- Loading already deployed contracts in Remix\n- Invoking smart contract functions, and create transactions\n- Looking at transaction hashes",
              "instructor_notes": ""
            },
            {
              "id": 778446,
              "key": "6d36f976-884d-4dc7-8a79-4cf899505957",
              "title": "C4L3 Concept 3 Remix V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "u46Eec0MbvI",
                "china_cdn_id": "u46Eec0MbvI.mp4"
              }
            },
            {
              "id": 784010,
              "key": "68d9d1e2-d9f4-4fe6-bdae-8b8d9ebca209",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Remix Environment Summary \n---\nRemix offers these 3 environment options when deploying a contract:\n - Javascript VM (an in-browser ethereum network, used for testing)\n - Injected web3 (used in conjunction with Metamask to deploy to public networks)\n - Web3 provider (used to connect to a locally running node)",
              "instructor_notes": ""
            },
            {
              "id": 784006,
              "key": "2cf9ea67-d375-4b7e-a2eb-ab216ab964a0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2cf9ea67-d375-4b7e-a2eb-ab216ab964a0",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784008,
              "key": "8d436c03-9a64-43d6-8186-c45d53b33b60",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Resources\n---\nWe covered some of the key features, but if you ever need more details checkout the [Remix documentation](https://remix.readthedocs.io/en/latest/). ",
              "instructor_notes": ""
            },
            {
              "id": 784009,
              "key": "4f5d2fc3-e0d9-4756-ae6d-02a02e9ffa30",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4f5d2fc3-e0d9-4756-ae6d-02a02e9ffa30",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778447,
              "key": "d9783ebc-7788-415c-ba3f-15e4618b7851",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d9783ebc-7788-415c-ba3f-15e4618b7851",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "1. Go to https://remix.ethereum.org/",
                "2. Make sure you have Metamsk Plugin installed",
                "3. Add a new contract using the + button on the top menu, called \"sampleContract.sol\"",
                "4. Explore the various options/tabs in Remix"
              ],
              "positive_feedback": "Now, that you are familiar with using Remix, let's start learning Solidity Syntax!",
              "video_feedback": null,
              "description": "Getting started with Remix"
            }
          ]
        },
        {
          "id": 778450,
          "key": "77f72718-8774-4340-a027-915126dc8de4",
          "title": "Memory Management in Solidity",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "77f72718-8774-4340-a027-915126dc8de4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783138,
              "key": "c26e5490-8e32-404c-9425-2e2c98ed5b02",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Memory Management in Solidity\n---\nMemory in Solidity is broadly divided into 3 types - *memory*, *storage*, and *callData*. \nLet's explore the properties of each of these types and understand when best to use each type. ",
              "instructor_notes": ""
            },
            {
              "id": 778449,
              "key": "be45ca5a-4070-4179-8c15-dca1992f1e32",
              "title": "C4L3 Concept 4 Memory Management V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "H6IYcwFG2Po",
                "china_cdn_id": "H6IYcwFG2Po.mp4"
              }
            },
            {
              "id": 784011,
              "key": "826d22fb-85cc-4f3a-a692-4e337c2a02c1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Definitions\n---\n - **memory** - Used for temporary storage of data, information is lost after function execution\n - **storage** - Used for variables in storage, stay with the contract, and the data persists\n - **callData** - Like a stack. Used for EVM call execution",
              "instructor_notes": ""
            },
            {
              "id": 784012,
              "key": "54354864-f150-472e-9afd-4bb1bb0d9c01",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/54354864-f150-472e-9afd-4bb1bb0d9c01",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778546,
              "key": "9bd59ede-5a01-4559-bc9e-9d3fe6c94032",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9bd59ede-5a01-4559-bc9e-9d3fe6c94032",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Memory in EVM is divided into 3 areas:",
                "answers": [
                  {
                    "id": "a1541222535707",
                    "text": "Memory, flash, calldata",
                    "is_correct": false
                  },
                  {
                    "id": "a1541222558148",
                    "text": "Memory, storage, calldata",
                    "is_correct": true
                  },
                  {
                    "id": "a1541222567104",
                    "text": "Storage, stack, calldata",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778547,
              "key": "a1b899ee-6c5c-4b67-b2f1-6870c3f9f0df",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a1b899ee-6c5c-4b67-b2f1-6870c3f9f0df",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Data in memory is lost after function execution.",
                "answers": [
                  {
                    "id": "a1541222656922",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541222667668",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778548,
              "key": "8f969e5e-5e71-4e3f-959c-be1d02e0e0d7",
              "title": "3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8f969e5e-5e71-4e3f-959c-be1d02e0e0d7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "State variables are always stored in memory by default.\n",
                "answers": [
                  {
                    "id": "a1541222717435",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1541222728658",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 778452,
          "key": "5081e69d-425b-4d0a-a75f-5b58f8e5d575",
          "title": "Elementary Data Types in Solidity",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5081e69d-425b-4d0a-a75f-5b58f8e5d575",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783012,
              "key": "639288f1-9337-4b91-94e5-26f85daccb0f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Elementary Data Types in Solidity\n---\nSimilar to other languages, Solidity has elementary  and complex data types. Let's first focus on the elementary data types:\n- uint\n- int\n- bool\n- address\n",
              "instructor_notes": ""
            },
            {
              "id": 778451,
              "key": "18194c4b-7f13-4aac-8f40-80f05fe6f567",
              "title": "C4L3 Concept 5 Basic Data Types V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "vw3xEXYEmKc",
                "china_cdn_id": "vw3xEXYEmKc.mp4"
              }
            },
            {
              "id": 784013,
              "key": "da532a18-6ca6-4690-afda-6cc816ee6c07",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Definitions\n---\n- **uint** - Use for unsigned integers of various sizes\n- **int** - Use for signed integers of various sizes\n- **bool** - The possible values are constants true and false\n- **address** - Represents address of externally owned account or contract account. Holds a 20 byte hex string of an Ethereum address.  It is a Value Type. \n\n## Resources\n---\n#### Solidity Documentation\nSee the full list of Types in the [Solidity Types documentation](https://solidity.readthedocs.io/en/v0.5.0/types.html?highlight=memory). \n\n",
              "instructor_notes": ""
            },
            {
              "id": 784015,
              "key": "d8f49440-de5c-49fd-a359-3767c40c4707",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d8f49440-de5c-49fd-a359-3767c40c4707",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784016,
              "key": "b2e4a9a3-c2db-415b-9f52-4ef80941358c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\n---\nIn this link you can find the contract example code updated:\n\n>[Basic Data Types](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/basicDataTypesContract.sol)\n",
              "instructor_notes": ""
            },
            {
              "id": 784017,
              "key": "6359891a-6e82-42fb-9fdf-57ff888ea5e3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6359891a-6e82-42fb-9fdf-57ff888ea5e3",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 783008,
              "key": "439ffb8c-55b5-4dda-85a4-52c9ee8df393",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "439ffb8c-55b5-4dda-85a4-52c9ee8df393",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the code above, if \n    uint8 a = 260; \nwould this give an error?",
                "answers": [
                  {
                    "id": "a1542071500085",
                    "text": "Yes",
                    "is_correct": true
                  },
                  {
                    "id": "a1542071582968",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778549,
              "key": "93f56100-b900-4f0b-8ef5-5cacf65983de",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "93f56100-b900-4f0b-8ef5-5cacf65983de",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "The size of an integer can be set in ________ bit increments.\n",
                "answers": [
                  {
                    "id": "a1541222848083",
                    "text": "8",
                    "is_correct": true
                  },
                  {
                    "id": "a1541222861849",
                    "text": "16",
                    "is_correct": false
                  },
                  {
                    "id": "a1541222864256",
                    "text": "24",
                    "is_correct": false
                  },
                  {
                    "id": "a1541222866931",
                    "text": "32",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778550,
              "key": "a664200f-e243-457e-9a05-e2de167d92ba",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a664200f-e243-457e-9a05-e2de167d92ba",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "int256  is the same as:",
                "answers": [
                  {
                    "id": "a1541222955780",
                    "text": "int8",
                    "is_correct": false
                  },
                  {
                    "id": "a1541222973352",
                    "text": "uint256",
                    "is_correct": false
                  },
                  {
                    "id": "a1541222977777",
                    "text": "int32",
                    "is_correct": false
                  },
                  {
                    "id": "a1541222983473",
                    "text": "int",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778551,
              "key": "3cc6214e-eb93-4a09-8ce6-63aad52a355e",
              "title": "3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3cc6214e-eb93-4a09-8ce6-63aad52a355e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "The size of the address  type variable is __________ bytes\n",
                "answers": [
                  {
                    "id": "a1541223023971",
                    "text": "8",
                    "is_correct": false
                  },
                  {
                    "id": "a1541223033605",
                    "text": "16",
                    "is_correct": false
                  },
                  {
                    "id": "a1541223036693",
                    "text": "20",
                    "is_correct": true
                  },
                  {
                    "id": "a1541223038995",
                    "text": "32",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 778454,
          "key": "4dd209fa-d51e-4462-b2ef-a47bf6e93b6c",
          "title": "Type Conversion in Solidity",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4dd209fa-d51e-4462-b2ef-a47bf6e93b6c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783020,
              "key": "02446b12-5c92-4617-bf58-d483bd77c17c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Type Conversion in Solidity\n---\nAll programming languages support some sort of type conversion. Solidity gives us the option for implicit and explicit type conversion. Let's see some examples of how to do this. Then we will see examples what types of conversions are allowed and what will give us compile errors. ",
              "instructor_notes": ""
            },
            {
              "id": 778453,
              "key": "4d667966-2740-4578-958b-ffdd63cb842a",
              "title": "C4L3 Concept 6 Type Conversion V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "PPsT3oeqePI",
                "china_cdn_id": "PPsT3oeqePI.mp4"
              }
            },
            {
              "id": 784022,
              "key": "4f4aab00-6ce8-48b1-a3c1-2c88b8cc64d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Definitions\n---\n##### Implicit Conversions\n\n\"If an operator is applied to different types, the compiler tries to implicitly convert one of the operands to the type of the other (the same is true for assignments). In general, an implicit conversion between value-types is possible if it makes sense semantically and no information is lost: `uint8` is convertible to `uint16` and `int128` to `int256`, but `int8` is not convertible to `uint256` (because `uint256` cannot hold e.g. `-1`).\" (Source: [Solidity Documentation v. 0.5.3](https://solidity.readthedocs.io/en/v0.5.3/types.html?highlight=memory#conversions-between-elementary-types))\n\n##### Explicit Conversions\n\n\"If the compiler does not allow implicit conversion but you know what you are doing, explicit type conversion is sometimes possible. Note that this may give you some unexpected behavior and allows you to bypass some security features of the compiler, so be sure to test that the result is what you want!\" (Source: [Solidity Documentation v. 0.5.3](https://solidity.readthedocs.io/en/v0.5.3/types.html?highlight=memory#conversions-between-elementary-types))",
              "instructor_notes": ""
            },
            {
              "id": 784023,
              "key": "4f8d8533-446e-4f1a-9f19-69053c6f7fd5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4f8d8533-446e-4f1a-9f19-69053c6f7fd5",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 782751,
              "key": "de25753f-ccbc-44ab-abf9-bb242820b5bc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n\n## Instructor Code\nIn this link you can find the contract example code updated:\n\n>[Type Conversion Contract ](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/typeConversionContract.sol)\n",
              "instructor_notes": ""
            },
            {
              "id": 784024,
              "key": "678eb4bf-357f-4fd1-a671-d36be5337731",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/678eb4bf-357f-4fd1-a671-d36be5337731",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778552,
              "key": "226acd64-aac5-45c0-a507-a4eaa0cd041e",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "226acd64-aac5-45c0-a507-a4eaa0cd041e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What type of conversion is carried out for uint8    to   uint16?\n",
                "answers": [
                  {
                    "id": "a1541223141120",
                    "text": "Implicit",
                    "is_correct": true
                  },
                  {
                    "id": "a1541223156889",
                    "text": "Explicit",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778553,
              "key": "72537d31-6463-4f72-87ef-5c3742ffb64a",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "72537d31-6463-4f72-87ef-5c3742ffb64a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Based on this piece of code:\n```\nuint8 a = 1; \nif(a) { \n     // Code 1\n} else { \n    // Code 2 \n}\n```\nWhat will be the outcome of the code above?",
                "answers": [
                  {
                    "id": "a1541223232970",
                    "text": "Code 1 is executed",
                    "is_correct": false
                  },
                  {
                    "id": "a1541223254240",
                    "text": "Code 2 is executed",
                    "is_correct": false
                  },
                  {
                    "id": "a1541223266761",
                    "text": "Runtime error",
                    "is_correct": false
                  },
                  {
                    "id": "a1541223280090",
                    "text": "Compilation Error",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778554,
              "key": "301b8ab3-8059-46af-ada7-a66464e9702d",
              "title": "3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "301b8ab3-8059-46af-ada7-a66464e9702d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "To convert a uint256 to uint128, you will need to use ______ conversion.",
                "answers": [
                  {
                    "id": "a1541223332630",
                    "text": "Implicit",
                    "is_correct": false
                  },
                  {
                    "id": "a1541223350504",
                    "text": "Explicit",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 778456,
          "key": "d46723dc-3974-4303-8d35-0d3be166a56e",
          "title": "Complex Data Types",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d46723dc-3974-4303-8d35-0d3be166a56e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783025,
              "key": "a0b6830d-e54a-4367-a9f4-cb678a19a402",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Complex Data Types\n---\nPreviously, we discussed some common elementary data types in Solidity. Now, let's explore some of the common complex data types you will be using throughout this program.\n\n**Complex Data Types in Solidity**\n - Arrays\n - Structs\n - Mapping\n - Strings\n - Bytes\n - Enums",
              "instructor_notes": ""
            },
            {
              "id": 778455,
              "key": "02048418-7a40-4cb6-a931-1b02ddd81d05",
              "title": "C4L3 Concept 7 Complex Data Types V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bxAUX1DNdRc",
                "china_cdn_id": "bxAUX1DNdRc.mp4"
              }
            },
            {
              "id": 784028,
              "key": "b3a6ef4d-2577-4580-8340-aaf4a73d5c0e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n---\n#### Solidity Documentation\nSee the full list of Types in the [Solidity Types documentation](https://solidity.readthedocs.io/en/v0.5.3/types.html). \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 778458,
          "key": "c9dd1496-f58b-4a01-8457-a6ce561038fc",
          "title": "Arrays",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c9dd1496-f58b-4a01-8457-a6ce561038fc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783026,
              "key": "9b4be6c4-27e3-4125-b28b-7dabc02cfe10",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Arrays\n---\nSolidity supports two types of arrays - *Static-sized Arrays* and *Dynamically-sized arrays*. Each type has certain properties and restrictions you will need to be aware of when using them to store data in smart contracts.\n",
              "instructor_notes": ""
            },
            {
              "id": 778457,
              "key": "4d6e8344-f53d-4ee6-8476-74ebcd5c7053",
              "title": "C4L3 Concept 8 Arrays Sound V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "PnNjBiETXik",
                "china_cdn_id": "PnNjBiETXik.mp4"
              }
            },
            {
              "id": 782752,
              "key": "81842d25-908c-4a8f-840a-aa6108bc6fdd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n---\n#### Solidity Documentation\n>[Solidity documentation - Arrays](https://solidity.readthedocs.io/en/v0.5.3/types.html#arrays)\n",
              "instructor_notes": ""
            },
            {
              "id": 814709,
              "key": "cad60517-b906-4880-af14-187aedf13734",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cad60517-b906-4880-af14-187aedf13734",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814708,
              "key": "8f96821a-3b17-48d0-ba09-3fe1f104f15d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\nIn this link you can find the contract example code updated:\n\n>[Arrays Contract Example](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/arraysContract.sol)",
              "instructor_notes": ""
            },
            {
              "id": 814707,
              "key": "314af591-263c-41b4-8e37-18a118b5423b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/314af591-263c-41b4-8e37-18a118b5423b",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778555,
              "key": "152a8f3a-0903-402b-84f1-ab2b91c55236",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "152a8f3a-0903-402b-84f1-ab2b91c55236",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Anything wrong with this code below?\n````\n    uint[] memory array;\n\n    array.push(254);\n````",
                "answers": [
                  {
                    "id": "a1541224466652",
                    "text": "Yes",
                    "is_correct": true
                  },
                  {
                    "id": "a1541224479819",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778556,
              "key": "bb07f46a-52e0-481e-80da-736f35225f5c",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bb07f46a-52e0-481e-80da-736f35225f5c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Anything wrong with this code?\n````\n    uint8[] memory dynamicMemoryArray;\n\n    dynamicMemoryArray = [uint8(1), 2];\n````",
                "answers": [
                  {
                    "id": "a1541224548569",
                    "text": "Yes",
                    "is_correct": true
                  },
                  {
                    "id": "a1541224567283",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 778460,
          "key": "b28f7fa1-3a6c-4b24-83f9-3aaf3c8bc7ff",
          "title": "String and Bytes Types",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b28f7fa1-3a6c-4b24-83f9-3aaf3c8bc7ff",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783027,
              "key": "a9e56d45-45f9-40e9-9b3b-01fd8939f108",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# String and Bytes Type\n---\nVariables of type bytes and string are special arrays. In this section, we will cover the differences between String Type and Bytes Type in Solidity and learn how to convert between strings to bytes. ",
              "instructor_notes": ""
            },
            {
              "id": 778459,
              "key": "14e19a96-7358-4527-b7d5-0d2cb92482e5",
              "title": "C4L3 Concept 9 Strings Bytes V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "EBoPPXVaza4",
                "china_cdn_id": "EBoPPXVaza4.mp4"
              }
            },
            {
              "id": 784037,
              "key": "db8c75ea-976c-40f5-a4d8-4abf8acb28fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n---\n#### Solidity Documentation\n>[Solidity documentation - String literals](https://solidity.readthedocs.io/en/v0.5.3/types.html?highlight=string#string-literals-and-types) \n",
              "instructor_notes": ""
            },
            {
              "id": 814710,
              "key": "19de2d88-3869-494f-b000-7499e20b450b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/19de2d88-3869-494f-b000-7499e20b450b",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814711,
              "key": "b9db9725-67e3-4ca9-b8b0-b9797b30ce93",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\nIn this link you can find the contract example code updated:\n\n>[Strings Contract Example ](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/stringsBytesContract.sol)",
              "instructor_notes": ""
            },
            {
              "id": 784041,
              "key": "37c07f92-4fc0-4c93-aa3d-0a2c13c32355",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/37c07f92-4fc0-4c93-aa3d-0a2c13c32355",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778557,
              "key": "fe4c168d-20e9-477a-a17e-713076753d2f",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fe4c168d-20e9-477a-a17e-713076753d2f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "byte is a valid type in Solidity.",
                "answers": [
                  {
                    "id": "a1541224638834",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541224658309",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778558,
              "key": "237264fc-a84c-4d7d-a4b7-135fac080166",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "237264fc-a84c-4d7d-a4b7-135fac080166",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "bytes1 is equivalent to: \nByte1\nByte[1]\nbytes[0][1]\n",
                "answers": [
                  {
                    "id": "a1541224716533",
                    "text": "byte1",
                    "is_correct": false
                  },
                  {
                    "id": "a1541224733119",
                    "text": "byte[1]",
                    "is_correct": true
                  },
                  {
                    "id": "a1541224757341",
                    "text": "bytes[0][1]",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778559,
              "key": "b684cacb-c305-4e07-8515-3f18a1f283de",
              "title": "3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b684cacb-c305-4e07-8515-3f18a1f283de",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is wrong with this code?\n\n```\n\n// Line 1\n\nbytes16  array;\nbyte[]   data;\n \n// Line 2\n\nfunction x() \nbytes storage myArr = data;\n\nfor(int i=0; i < 4; i++){\n\n// Line 3\n\ndata[i] = 20;\n\n }\n\n// Line 4\n\ndata.length=4;\n}\n```",
                "answers": [
                  {
                    "id": "a1541224831815",
                    "text": "Line 1",
                    "is_correct": false
                  },
                  {
                    "id": "a1541224872235",
                    "text": "Line 2",
                    "is_correct": false
                  },
                  {
                    "id": "a1541224875248",
                    "text": "Line 3",
                    "is_correct": true
                  },
                  {
                    "id": "a1541224880969",
                    "text": "Line 4",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778560,
              "key": "6dd90d4d-d61a-48cd-9144-ba315f0b0c78",
              "title": "4",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6dd90d4d-d61a-48cd-9144-ba315f0b0c78",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Is there anything wrong with this code above?\n```\nbytes24 x; \n\nbytes32 y; \n\nx = y;\n```",
                "answers": [
                  {
                    "id": "a1541224939435",
                    "text": "Compilation error, as bytes24 is smaller than bytes32.",
                    "is_correct": true
                  },
                  {
                    "id": "a1541224991811",
                    "text": "Works Fine",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778561,
              "key": "8d8d38d3-d7ab-463c-b3a8-3107a48fd3dc",
              "title": "5",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8d8d38d3-d7ab-463c-b3a8-3107a48fd3dc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "String is a basic and value type in Solidity.\n",
                "answers": [
                  {
                    "id": "a1541225159880",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1541225171897",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778562,
              "key": "5ade405e-c843-4a21-83f7-f8121a127d03",
              "title": "6",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5ade405e-c843-4a21-83f7-f8121a127d03",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "String and Bytes may be converted to each other.",
                "answers": [
                  {
                    "id": "a1541225216731",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541225230808",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778563,
              "key": "53b10e77-d158-45c6-8a9e-e4a2cd22a716",
              "title": "7",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "53b10e77-d158-45c6-8a9e-e4a2cd22a716",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "To increase the length of the string, you can simply use \nstr.length=6  or use \nstr.push('a').\n",
                "answers": [
                  {
                    "id": "a1541225289672",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1541225313827",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778564,
              "key": "1bf3a819-6e0d-42d6-a6c3-10876365ef87",
              "title": "8",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1bf3a819-6e0d-42d6-a6c3-10876365ef87",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "To check validity of a string str  you would use:",
                "answers": [
                  {
                    "id": "a1541225370904",
                    "text": "if(str == null)",
                    "is_correct": false
                  },
                  {
                    "id": "a1541225392322",
                    "text": "if(str.length == 0)",
                    "is_correct": false
                  },
                  {
                    "id": "a1541225399739",
                    "text": "if(bytes(str).length == 0)",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 784042,
              "key": "d42c827d-50cc-4e84-a3a8-8951271a9fe3",
              "title": "Coding Quiz",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d42c827d-50cc-4e84-a3a8-8951271a9fe3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a Smart Contract called \"stringsContract\"",
                "Inside this contract, write a function that takes in 2 arguments, a string and an index",
                "Add code inside this function to return the character of the string at the index value, in bytes."
              ],
              "positive_feedback": "```\n// Below is a sample code of how we approached this exercise\ncontract stringsContract {\n// Retrieves the element at specified index\n//  Cannot do with strings, hence converting to bytes\n  \n  function  getElementAt(string name, uint index) public pure returns(byte) {\n      \n    // Convert string to bytes\n    bytes  memory bytesData = bytes(name);  \n    // Get the element at the specified index\n    return bytesData[index]; \n    }\n    }\n```",
              "video_feedback": null,
              "description": "Use your knowledge of strings and byte to complete this coding challenge."
            }
          ]
        },
        {
          "id": 778462,
          "key": "29626118-02a8-41d1-a1ba-18a15ae9acb1",
          "title": "Mappings",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "29626118-02a8-41d1-a1ba-18a15ae9acb1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783120,
              "key": "d3478189-1972-4808-9715-23dca3d03552",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Mappings\n---\nIn Solidity, one common way you will see data stored is via mappings. \n\n\"Think of mappings as hash tables where very possible key exists and is mapped to a value whose byte-representation is all zeros, a type’s default value.\n\nThe similarity ends there, the key data is not stored in a mapping, only its `keccak256` hash is used to look up the value. Because of this, mappings do not have a length or a concept of a key or value being set.\" ([Source - Solidity documentation v.0.5.0](https://solidity.readthedocs.io/en/v0.5.0/types.html#mappings))",
              "instructor_notes": ""
            },
            {
              "id": 778461,
              "key": "8a9caa8a-5dc2-473b-93b5-d891d43c171b",
              "title": "C4L3 Concept 10 Mapping V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "a8e3A8-R-S4",
                "china_cdn_id": "a8e3A8-R-S4.mp4"
              }
            },
            {
              "id": 784043,
              "key": "b1dad716-cb79-4aa1-b12a-98f77e5b3cc6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n---\n#### Solidity Documentation\n>[Solidity documentation - Mappings](https://solidity.readthedocs.io/en/v0.5.3/types.html#mappings)\n\n",
              "instructor_notes": ""
            },
            {
              "id": 814712,
              "key": "7616cff6-4493-4917-b592-eef194d4ac5a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7616cff6-4493-4917-b592-eef194d4ac5a",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814713,
              "key": "6995f78c-936b-4955-80a2-7f15c19a9789",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\nIn this link you can find the contract example code updated:\n\n>[Mapping Contract Example](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/mappingContract.sol)",
              "instructor_notes": ""
            },
            {
              "id": 784044,
              "key": "5593ec6e-9162-485d-a38a-9e16b815f767",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5593ec6e-9162-485d-a38a-9e16b815f767",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778565,
              "key": "93d50017-e581-4c00-b6b5-7b1650a045dc",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "93d50017-e581-4c00-b6b5-7b1650a045dc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the mapping(address => string) names, if the key does not exist, then what will names[key] return?",
                "answers": [
                  {
                    "id": "a1541227212205",
                    "text": "Null",
                    "is_correct": false
                  },
                  {
                    "id": "a1541227230532",
                    "text": "An Empty string ('')",
                    "is_correct": true
                  },
                  {
                    "id": "a1541227244811",
                    "text": "0",
                    "is_correct": false
                  },
                  {
                    "id": "a1541227250993",
                    "text": "0x00000000000000000000 (0 address)",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778566,
              "key": "7affc16e-2e32-4d9c-8da6-8faee7a8913f",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7affc16e-2e32-4d9c-8da6-8faee7a8913f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Key in a mapping, can be of any type except _____ type",
                "answers": [
                  {
                    "id": "a1541227379831",
                    "text": "Mapping",
                    "is_correct": true
                  },
                  {
                    "id": "a1541227396307",
                    "text": "Struct",
                    "is_correct": false
                  },
                  {
                    "id": "a1541227399694",
                    "text": "Enum",
                    "is_correct": false
                  },
                  {
                    "id": "a1541227403672",
                    "text": "There is no restriction.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778567,
              "key": "376d7334-52ed-4152-b2c7-08d98eb3c8e3",
              "title": "3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "376d7334-52ed-4152-b2c7-08d98eb3c8e3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Values in a mapping, can be of any type except _____ type.\n",
                "answers": [
                  {
                    "id": "a1541227455345",
                    "text": "Mapping",
                    "is_correct": false
                  },
                  {
                    "id": "a1541227476590",
                    "text": "Struct",
                    "is_correct": false
                  },
                  {
                    "id": "a1541227479791",
                    "text": "Enum",
                    "is_correct": false
                  },
                  {
                    "id": "a1541227483023",
                    "text": "There is no restriction.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778568,
              "key": "55513783-abf3-4695-b6f9-7b87bf457128",
              "title": "4",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "55513783-abf3-4695-b6f9-7b87bf457128",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In a Mapping, a Key itself is stored, as a value of the key.\n",
                "answers": [
                  {
                    "id": "a1541227584298",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1541227622037",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778569,
              "key": "8f7d6800-cc41-48fb-93a9-b15b10a6dc44",
              "title": "5",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8f7d6800-cc41-48fb-93a9-b15b10a6dc44",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "To remove the value for a key in a mapping, you would use _______.",
                "answers": [
                  {
                    "id": "a1541227672048",
                    "text": "remove (key)",
                    "is_correct": false
                  },
                  {
                    "id": "a1541227691429",
                    "text": "delete (key)",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778570,
              "key": "98a5cc09-47d8-4fe4-83b6-3ef0bc5e3301",
              "title": "6",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "98a5cc09-47d8-4fe4-83b6-3ef0bc5e3301",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "To get the number of elements in mapping you can use:\n\nmapping.length() ",
                "answers": [
                  {
                    "id": "a1541227725766",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1541227745324",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778571,
              "key": "219779f6-e0cb-4d93-a8ca-c772cafd1f24",
              "title": "7",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "219779f6-e0cb-4d93-a8ca-c772cafd1f24",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "We can iterate through a Mapping.\n",
                "answers": [
                  {
                    "id": "a1541227789738",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1541227801657",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 778464,
          "key": "f570dbc9-8bb6-4cb8-9c67-9b206794c587",
          "title": "Enums",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f570dbc9-8bb6-4cb8-9c67-9b206794c587",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783121,
              "key": "2c66ff46-5585-49d8-86d6-d2b3d16f9182",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Enums\n---\nEnums are a way to create a user-defined type in Solidity and you will use them quite often in upcoming smart contracts in your projects, so let's explore some of their key properties. ",
              "instructor_notes": ""
            },
            {
              "id": 778463,
              "key": "49c89de8-2064-4a22-80b8-57ad0cf18418",
              "title": "C4L3 Concept 11 Enums V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "JbFQ4aYeFOE",
                "china_cdn_id": "JbFQ4aYeFOE.mp4"
              }
            },
            {
              "id": 784046,
              "key": "9d13b070-4a30-4bb5-a6f8-122a3fc9c2b9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n---\n#### Solidity Documentation\n>[Solidity documentation - Enums](https://solidity.readthedocs.io/en/v0.5.3/types.html#enums)\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 814714,
              "key": "80ca335d-3677-4948-bd40-d93bc6a428c0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/80ca335d-3677-4948-bd40-d93bc6a428c0",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814715,
              "key": "016b92f4-ccb8-4009-bb41-62a689102aee",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\nIn this link you can find the contract example code updated:\n\n>[Enums Contract Example](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/enumsContract.sol)",
              "instructor_notes": ""
            },
            {
              "id": 784048,
              "key": "d6d4aeac-7c4e-4bed-8496-9fdadf0dae56",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d6d4aeac-7c4e-4bed-8496-9fdadf0dae56",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778572,
              "key": "25a0fd72-d576-4e36-8e19-a3bb74562c7f",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "25a0fd72-d576-4e36-8e19-a3bb74562c7f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Enumerations are NOT part of the public contract interface (abi definition).",
                "answers": [
                  {
                    "id": "a1541229264290",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541229283138",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778573,
              "key": "178442ff-1e9a-42c1-837e-b179054a9798",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "178442ff-1e9a-42c1-837e-b179054a9798",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Enum values can be _____ converted to/from uint value.\n",
                "answers": [
                  {
                    "id": "a1541229333897",
                    "text": "Implicitly",
                    "is_correct": false
                  },
                  {
                    "id": "a1541229356801",
                    "text": "Explicitly",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 778466,
          "key": "f7dd796a-dd77-45ef-a73a-f496f52a5595",
          "title": "Structs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f7dd796a-dd77-45ef-a73a-f496f52a5595",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783122,
              "key": "a2e1fe9f-4773-4a76-94f3-26dcdb97c422",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Structs\n---\nStructs are another user-defined type you will be using often. Struct types can be used inside mappings and arrays and they can itself contain mappings and arrays. Let's see some examples of this type. ",
              "instructor_notes": ""
            },
            {
              "id": 778465,
              "key": "bb17ca38-55d0-43d0-88d6-03c019627458",
              "title": "C4L3 Concept 12 Structs V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "eSTO3TLakIs",
                "china_cdn_id": "eSTO3TLakIs.mp4"
              }
            },
            {
              "id": 782756,
              "key": "432873de-8add-4246-8ee6-d9b514037a04",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n---\n#### Solidity Documentation\n>[Solidity documentation - Structs](https://solidity.readthedocs.io/en/v0.5.3/types.html#structs). \n",
              "instructor_notes": ""
            },
            {
              "id": 814716,
              "key": "77e75e81-7d6c-48ae-8394-601146185ba2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/77e75e81-7d6c-48ae-8394-601146185ba2",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814717,
              "key": "3548fe96-7672-42ae-8a0f-eb104b0133c6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\nIn this link you can find the contract example code updated:\n\n>[Structs Contract Example](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/structsContract.sol)",
              "instructor_notes": ""
            },
            {
              "id": 784051,
              "key": "b280a2ab-da7c-42cc-9205-b5c9fe314647",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b280a2ab-da7c-42cc-9205-b5c9fe314647",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778574,
              "key": "f1b907ac-5d13-4cec-a37a-7487ffa0e8dd",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f1b907ac-5d13-4cec-a37a-7487ffa0e8dd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which one is not correct for structs?\n",
                "answers": [
                  {
                    "id": "a1541229427715",
                    "text": "An array can have struct type elements",
                    "is_correct": false
                  },
                  {
                    "id": "a1541229443455",
                    "text": "A struct can have attribute of its own type",
                    "is_correct": false
                  },
                  {
                    "id": "a1541229448853",
                    "text": "A struct can have other structs as attributes",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778575,
              "key": "07321a03-5984-42f4-81ac-953ba477a57d",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "07321a03-5984-42f4-81ac-953ba477a57d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Struct  types are NOT part of the abi defintion.\n\nFunction calls from outside cannot send/receive struct types.",
                "answers": [
                  {
                    "id": "a1541229512802",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541229537694",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778576,
              "key": "3aa969a6-4c31-4394-9804-16b34ce0273f",
              "title": "3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3aa969a6-4c31-4394-9804-16b34ce0273f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When a local variable of type struct  is declared, its default type is _______.\n",
                "answers": [
                  {
                    "id": "a1541229601259",
                    "text": "Memory",
                    "is_correct": true
                  },
                  {
                    "id": "a1541229614344",
                    "text": "Storage",
                    "is_correct": false
                  },
                  {
                    "id": "a1541229618152",
                    "text": "Local",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 778468,
          "key": "e4d9c333-858a-4947-967a-58d9d3ed5304",
          "title": "Solidity Global Variables and Ether Units",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e4d9c333-858a-4947-967a-58d9d3ed5304",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783123,
              "key": "0d877746-c82b-479b-9038-489aded031a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solidity Global Variables and Ether Units\n---\nSolidity offers several global variables that will be vital as you continue developing smart contracts that retrieve and post information in the blockchain.  Let's explore these specific concepts:\n- Block Global Variable\n- Tx Global Variable\n- Msg Global Variable\n- Ether Unit conversions using Global prefixes\n- Time Unit conversions using Global prefixes\n",
              "instructor_notes": ""
            },
            {
              "id": 778467,
              "key": "a15343da-0135-4cf1-9886-1a3314192112",
              "title": "C4L3 Concept 13 Global Variables V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "i602N_bcdBQ",
                "china_cdn_id": "i602N_bcdBQ.mp4"
              }
            },
            {
              "id": 782757,
              "key": "ca64200a-a43c-4f92-84f6-0a9fe1a15cef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n---\n#### Solidity Documentation\n>[Solidity documentation - Units and Globally Available Variables](https://solidity.readthedocs.io/en/v0.5.3/units-and-global-variables.html)\n",
              "instructor_notes": ""
            },
            {
              "id": 814718,
              "key": "053f61f9-d46d-4c50-835c-aa65453b6ad0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/053f61f9-d46d-4c50-835c-aa65453b6ad0",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814719,
              "key": "f7913833-b360-469d-bceb-585309ad0d9b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\nIn this link you can find the contract example code updated:\n\n>[Global Variables Contract Example](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/globalVariablesContract.sol)",
              "instructor_notes": ""
            },
            {
              "id": 784054,
              "key": "508797a3-f01f-4bd6-96fb-2bb66997f5c1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/508797a3-f01f-4bd6-96fb-2bb66997f5c1",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778577,
              "key": "87ffc034-0a02-445e-bd1c-7c58c0ef8c90",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "87ffc034-0a02-445e-bd1c-7c58c0ef8c90",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Time unit conversion is carried out using:",
                "answers": [
                  {
                    "id": "a1541229690413",
                    "text": "Functions hours( ), minutes ( ), seconds ( ), years ( )",
                    "is_correct": false
                  },
                  {
                    "id": "a1541229716816",
                    "text": "Suffix hours, minutes, seconds, years",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778578,
              "key": "2702a7e4-10d9-4acc-9220-71063dd700a2",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2702a7e4-10d9-4acc-9220-71063dd700a2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Ethers sent to a contract, are available in the function code as ________.",
                "answers": [
                  {
                    "id": "a1541229775326",
                    "text": "msg.ether",
                    "is_correct": false
                  },
                  {
                    "id": "a1541229808258",
                    "text": "msg.value",
                    "is_correct": true
                  },
                  {
                    "id": "a1541229813612",
                    "text": "msg.amount",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 778470,
          "key": "d11ed133-8776-4a56-82ce-85f8b0b4d73b",
          "title": "Functions in Solidity",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d11ed133-8776-4a56-82ce-85f8b0b4d73b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783124,
              "key": "4308b495-aa11-42c7-a3aa-5687a36707bf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Functions in Solidity\n---\nLet's add some utility to our contracts with functions! Functions are the executable units of code within a contract. In this section, we will explore the different *function types*, *fallback functions*, *constructor functions*, and *function modifiers*.  \n\n\n#### Function Syntax\n---\nFirst, let's see the syntax for a function in Solidity - *function name*, *function type*, and *return type*. ",
              "instructor_notes": ""
            },
            {
              "id": 783128,
              "key": "237f7bbc-ed83-43fc-a3af-223f0aeb0c75",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/November/5bea80a7_functions/functions.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/237f7bbc-ed83-43fc-a3af-223f0aeb0c75",
              "caption": "",
              "alt": "",
              "width": 960,
              "height": 540,
              "instructor_notes": null
            },
            {
              "id": 784055,
              "key": "a0e161f0-05f8-449a-acc1-74404649a27e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Function Types\n---\nHere are the different function types available in Solidity: ",
              "instructor_notes": ""
            },
            {
              "id": 783129,
              "key": "a58052ca-7595-4545-8521-9ca6cfdf17bc",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/November/5bea80f3_functiontypes/functiontypes.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a58052ca-7595-4545-8521-9ca6cfdf17bc",
              "caption": "",
              "alt": "",
              "width": 960,
              "height": 540,
              "instructor_notes": null
            },
            {
              "id": 784057,
              "key": "eee0ca77-b873-4d8a-9bcc-99660cdf2181",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Functions\n---\nIn this video, we will elaborate on function syntax, function types, as well as focus on differences between public and private functions. ",
              "instructor_notes": ""
            },
            {
              "id": 778469,
              "key": "97d87cba-6490-4e52-84fa-05ff93db2a60",
              "title": "C4L3 Concept 14 Functions Part1 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "hZVHqJ5oiEM",
                "china_cdn_id": "hZVHqJ5oiEM.mp4"
              }
            },
            {
              "id": 784059,
              "key": "a7296cd9-3bbe-436f-af86-38983c1cd45c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Fallback Functions and Function Modifiers\n---\nIn the next video, we will explore fallback functions and function modifiers.\n\n##### Fallback Functions\nFallback functions provide a safeguard. They are automatically triggered if the function signature does not match any of the function signatures in the smart contract. A contract can have exactly one fallback function. These fallback functions are unnamed. \n\n##### Function Modifiers\n\"Modifiers can be used to easily change the behavior of functions. For example, they can automatically check a condition prior to executing the function. Modifiers are inheritable properties of contracts and may be overridden by derived contracts.\" ([Source - Solidity documentation v.0.5.3](https://solidity.readthedocs.io/en/v0.5.3/contracts.html#function-modifiers))",
              "instructor_notes": ""
            },
            {
              "id": 781918,
              "key": "9a97038f-e193-425b-8b25-c743038fd289",
              "title": "C4L3 Concept 14 Functions Part2 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "UFYi6SWqk0M",
                "china_cdn_id": "UFYi6SWqk0M.mp4"
              }
            },
            {
              "id": 782758,
              "key": "45d15de8-321a-4a9f-b77b-745e2bd20d30",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n---\n#### Solidity Documentation\n- [Solidity documentation - Function](https://solidity.readthedocs.io/en/v0.5.3/structure-of-a-contract.html?highlight=function#functions)\n- [Solidity documentation - Fallback Function](https://solidity.readthedocs.io/en/v0.5.3/contracts.html?highlight=fallback#fallback-function)\n- [Solidity documentation - Function Modifiers](https://solidity.readthedocs.io/en/v0.5.3/contracts.html#function-modifiers)\n",
              "instructor_notes": ""
            },
            {
              "id": 814722,
              "key": "91ffe30a-2bc6-4c3f-9023-596ce361bec1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/91ffe30a-2bc6-4c3f-9023-596ce361bec1",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814723,
              "key": "e3684b66-0b37-46e0-87b4-f7e44cc3d96c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\nIn this link you can find the contract example code updated:\n\n>[ Function Contract Example ](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/functionsContract.sol)\n",
              "instructor_notes": ""
            },
            {
              "id": 784061,
              "key": "1c2a57f2-6585-4cc1-8f5b-bc0870103c43",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1c2a57f2-6585-4cc1-8f5b-bc0870103c43",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778579,
              "key": "b5a71792-d4c9-487f-95f6-98104056f7c1",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b5a71792-d4c9-487f-95f6-98104056f7c1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Solidity functions can return multiple values:",
                "answers": [
                  {
                    "id": "a1541229888448",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541229896079",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778580,
              "key": "92a924ce-20ca-4613-886b-e17e04ec98f1",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "92a924ce-20ca-4613-886b-e17e04ec98f1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When a function returns multiple values to an outside web3 application, the values are returned as a:",
                "answers": [
                  {
                    "id": "a1541229983001",
                    "text": "struct",
                    "is_correct": false
                  },
                  {
                    "id": "a1541229992921",
                    "text": "array",
                    "is_correct": true
                  },
                  {
                    "id": "a1541230008069",
                    "text": "mapping",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778581,
              "key": "5cbf32a5-f7aa-4a2d-85a4-3148f8e297e9",
              "title": "3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5cbf32a5-f7aa-4a2d-85a4-3148f8e297e9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Is there anything wrong with this code below?\n```\n    function test(uint8 amount, string ) returns ( uint16 value) {\n\n    uint8  temp;\n\n    temp = amount*100;\n\n    for(uint8 temp = 0; temp > 4; temp++){\n\n    if(temp == 0) {\n     uint16 calculated=0;\n              }\n     value = calculated;\n \n    }\n```\n",
                "answers": [
                  {
                    "id": "a1541230036443",
                    "text": "Compilation error as the name of the 2nd argument is missing in the function declaration",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230078355",
                    "text": "Compilation error, as there is no return statement in the end",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230086752",
                    "text": "Compilation error, as temp is declared twice",
                    "is_correct": true
                  },
                  {
                    "id": "a1541230098853",
                    "text": "Code works fine",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778582,
              "key": "a0744ff2-3b1f-4a00-8018-06863b426998",
              "title": "4",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a0744ff2-3b1f-4a00-8018-06863b426998",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Variables declared as external cannot be accessed by another contract.\n",
                "answers": [
                  {
                    "id": "a1541230162652",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230173193",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778583,
              "key": "5cf71054-3dc4-42a9-973e-a0e8ab1fa809",
              "title": "5",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5cf71054-3dc4-42a9-973e-a0e8ab1fa809",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Storage variables declared as internal can be accessed from the derived/child contracts, BUT variables declared as private cannot be accessed from derived/child contracts.",
                "answers": [
                  {
                    "id": "a1541230237145",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541230256862",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778584,
              "key": "8477359a-637b-4a18-b590-77b5d6780798",
              "title": "6",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8477359a-637b-4a18-b590-77b5d6780798",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When a storage variable is declared public , the compiler automatically creates a getter function with the name of the variable. The setter function is not created.",
                "answers": [
                  {
                    "id": "a1541230292602",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541230305147",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778585,
              "key": "842a28fe-8e77-42f8-84f9-d5dc242759f0",
              "title": "7",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "842a28fe-8e77-42f8-84f9-d5dc242759f0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "By default , functions are public.",
                "answers": [
                  {
                    "id": "a1541230353878",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541230366390",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778586,
              "key": "fa6eeeb3-6735-48ea-8a04-354f4e15ba90",
              "title": "8",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fa6eeeb3-6735-48ea-8a04-354f4e15ba90",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "You would like a function to be unavailable for invocation from outside the contract, but you would like that function to be available to the derived contracts. \n\nThe function should be declared as:",
                "answers": [
                  {
                    "id": "a1541230427853",
                    "text": "Internal",
                    "is_correct": true
                  },
                  {
                    "id": "a1541230449893",
                    "text": "External",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230454982",
                    "text": "Public",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230459365",
                    "text": "Private",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778587,
              "key": "527a25a9-2f2d-403e-9ea9-da6acfde1350",
              "title": "9",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "527a25a9-2f2d-403e-9ea9-da6acfde1350",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "A function A is declared external . In function B you may:",
                "answers": [
                  {
                    "id": "a1541230522745",
                    "text": "Invoke function A , using this keyword",
                    "is_correct": true
                  },
                  {
                    "id": "a1541230534281",
                    "text": "Regularly invoke function A",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230544819",
                    "text": "Cannot invoke the function",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230555229",
                    "text": "Can invoke it either way",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 778472,
          "key": "ba57c06e-6b32-4b2a-b06b-3f9db5ae9b9e",
          "title": "Error Handling in Solidity",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ba57c06e-6b32-4b2a-b06b-3f9db5ae9b9e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783125,
              "key": "fdb475b7-0985-4f83-affc-3c459bb65919",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Error Handling in Solidity\n---\nEvery programming language needs to effectively handle errors. Let's see the different ways to do so in Solidity using these functions:\n - revert ( )\n - require ( )\n - assert ( )\n",
              "instructor_notes": ""
            },
            {
              "id": 778471,
              "key": "245dd783-7b85-456a-b98a-08d488fca86b",
              "title": "C4L3 Concept 15 Exceptions V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "msB6YeUNQxk",
                "china_cdn_id": "msB6YeUNQxk.mp4"
              }
            },
            {
              "id": 782759,
              "key": "9f23957b-f600-463d-8e9f-871a829231dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n---\n#### Solidity Documentation\n>[Solidity documentation - Error handling: Assert, Require, Revert and Exceptions\n](https://solidity.readthedocs.io/en/v0.5.3/control-structures.html#error-handling-assert-require-revert-and-exceptions)\n",
              "instructor_notes": ""
            },
            {
              "id": 814724,
              "key": "eb369364-01f8-4162-80b6-67025234fa73",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/eb369364-01f8-4162-80b6-67025234fa73",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814725,
              "key": "857063ef-9908-40af-a6b5-ed125e711f0b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\nIn this link you can find the contract example code updated:\n\n>[Exceptions Contract Example](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/exceptionsContract.sol)\n",
              "instructor_notes": ""
            },
            {
              "id": 784062,
              "key": "eb3ef211-05ec-496e-b383-8cbff5621384",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/eb3ef211-05ec-496e-b383-8cbff5621384",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778588,
              "key": "c94d36b8-5a14-4852-9fb5-d88a286c9bca",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c94d36b8-5a14-4852-9fb5-d88a286c9bca",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "The call to revert() halts the execution of contract. \n\nAll state changes get reverted when revert()  is executed.",
                "answers": [
                  {
                    "id": "a1541230685443",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541230704227",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778589,
              "key": "ccc5e14d-9250-42c7-b7d9-52ae33b8c886",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ccc5e14d-9250-42c7-b7d9-52ae33b8c886",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When the transaction code hits a statement that throws an exception then: ____________ \n",
                "answers": [
                  {
                    "id": "a1541230741980",
                    "text": "Ethers are not transferred",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230761650",
                    "text": "Unused gas is sent back",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230764099",
                    "text": "All state changes prior to the exception are reversed",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230765330",
                    "text": "Received ethers are sent back",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230784910",
                    "text": "Transaction is recorded",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230793435",
                    "text": "All of the above",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778590,
              "key": "ffd3f7bf-c7d3-4e03-8ae5-fcda8bb954e1",
              "title": "3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ffd3f7bf-c7d3-4e03-8ae5-fcda8bb954e1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Exception can be thrown with the revert() or require(..) or assert(..)  function,  and then can be handled in try - catch  block within the contract code.",
                "answers": [
                  {
                    "id": "a1541230848760",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230866555",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778591,
              "key": "721abc82-0dd8-4234-8ae0-47f0b0c45efb",
              "title": "4",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "721abc82-0dd8-4234-8ae0-47f0b0c45efb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Both assert()  and require()  lead to similar behavior on the surface but there is one important difference:\n",
                "answers": [
                  {
                    "id": "a1541230915719",
                    "text": "Assert uses up all the gas, and revert sends back unused gas",
                    "is_correct": true
                  },
                  {
                    "id": "a1541230936055",
                    "text": "Assert sends back unused gas and revert uses up all the gas",
                    "is_correct": false
                  },
                  {
                    "id": "a1541230949336",
                    "text": "Both send back all the unused gas",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778592,
              "key": "ed4e385a-ba76-4611-9dfe-0c1cc2bb86ea",
              "title": "5",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ed4e385a-ba76-4611-9dfe-0c1cc2bb86ea",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "assert and require throw exceptions, when the specified condition is not met.",
                "answers": [
                  {
                    "id": "a1541231020855",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541231045561",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 784063,
              "key": "7604d141-bdc0-46dd-9734-0999a4575fea",
              "title": "Modifier Coding Exercise - Bidding Contract",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7604d141-bdc0-46dd-9734-0999a4575fea",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a contract called \"Modifiers.sol\"",
                "Initialize a public variable that sets a minimum bidding amount",
                "Write a Modifier that only accepts bids greater than this minimum amount; otherwise, throw a revert style of exception",
                "Write a function \"bid\" that applies this modifier and only lets bids higher than the minimum amount, execute the code inside this function",
                "BONUS: You can choose to write the code inside this function (but you can just leave it blank out for now)"
              ],
              "positive_feedback": "Here's our code solution to this exercise:\n\n``` \npragma solidity ^0.4.25;\n\n    contract Modifiers {\n  \n    uint  public  minimumOffer = 100;\n \n    modifier  minimumAmount(){\n        if(msg.value >= minimumOffer){\n            _;\n        } else {\n            /** Throw an exception */\n            revert();\n        }\n    }\n    \n    function  bid() payable public minimumAmount returns(bool)  {\n        // Code the adding a new bid\n        return true;\n    }\n    }\n```",
              "video_feedback": null,
              "description": "Use your knowledge of modifiers to code up a bidding contract."
            }
          ]
        },
        {
          "id": 778474,
          "key": "e13ccb25-b563-492e-918d-7edf21abdb7d",
          "title": "Inheritance in Solidity",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e13ccb25-b563-492e-918d-7edf21abdb7d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783126,
              "key": "2cab4720-3410-4e58-adfa-b2aa6f640068",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Inheritance in Solidity\n---\nSimilar to other languages, Solidity supports multiple inheritance and interfaces. When a contract inherits from other contracts, only a single contract is created on the blockchain, and the code from all the base contracts is copied into the created contract. \n\nIn this concept, we will see requirements when inheriting contracts using the `import` statement. Additionally, we will see how to create abstract Contracts using the `interface` keyword. \n",
              "instructor_notes": ""
            },
            {
              "id": 778473,
              "key": "76559e1f-6cde-4b19-91fe-4c4a232ccd2a",
              "title": "C4L3 Concept 16 Inheritance V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "d1EjY4UeJM0",
                "china_cdn_id": "d1EjY4UeJM0.mp4"
              }
            },
            {
              "id": 782760,
              "key": "44c98fab-ab15-41af-9cc9-a5aeb49efe55",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n---\n#### Solidity Documentation\n- [Solidity documentation - Inheritance](https://solidity.readthedocs.io/en/v0.5.3/contracts.html#inheritance)\n- [Solidity documentation - Interfaces](https://solidity.readthedocs.io/en/v0.5.3/contracts.html?highlight=interface#interfaces)\n",
              "instructor_notes": ""
            },
            {
              "id": 814726,
              "key": "754e6b21-e23d-4854-b9a4-cff121dc2af6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/754e6b21-e23d-4854-b9a4-cff121dc2af6",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814727,
              "key": "631be9d1-12c7-4840-9036-cba570543070",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\nIn this link you can find the contract example code updated:\n\n>[Main Contract Example](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/mainContract.sol)\n\n>[ Inheritance Contract Example ](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/inheritanceContract.sol)",
              "instructor_notes": ""
            },
            {
              "id": 784073,
              "key": "adacdaa8-7743-4bee-becc-4c1a2f651988",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/adacdaa8-7743-4bee-becc-4c1a2f651988",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778593,
              "key": "16a50873-664e-4370-acc3-c804f239d95a",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "16a50873-664e-4370-acc3-c804f239d95a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Solidity does not support multiple inheritance.",
                "answers": [
                  {
                    "id": "a1541231111720",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1541231121089",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778594,
              "key": "0b9d56ba-36c2-4cca-b8df-08aea2321eef",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0b9d56ba-36c2-4cca-b8df-08aea2321eef",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "An interface is like a Abstract contract because, it can have unimplemented functions, without any body.",
                "answers": [
                  {
                    "id": "a1541231159224",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "a1541231175696",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778595,
              "key": "bf17cb13-93f1-449d-8f92-f927e465e48d",
              "title": "3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bf17cb13-93f1-449d-8f92-f927e465e48d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which one is incorrect about an abstract contract?\n",
                "answers": [
                  {
                    "id": "a1541231217568",
                    "text": "It cannot be deployed.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541231238695",
                    "text": "Contracts can inherit an abstract contract.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541231251872",
                    "text": "Abstract contracts are created using the keyword Abstract",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778596,
              "key": "d36cd788-0585-40cf-82d5-79b6b1582137",
              "title": "4",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d36cd788-0585-40cf-82d5-79b6b1582137",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "A contract that inherits a abstract contract MUST implement all un implemented functions in the parent contract otherwise:",
                "answers": [
                  {
                    "id": "a1541231339276",
                    "text": "You will get a Compile time error",
                    "is_correct": false
                  },
                  {
                    "id": "a1541231356818",
                    "text": "The derived contract will be abstract too, and cannot be deployed. ",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778597,
              "key": "72caa1ab-1d50-47a9-8a10-db7425a020c9",
              "title": "5",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "72caa1ab-1d50-47a9-8a10-db7425a020c9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which one is incorrect with regard to Solidity interface?\n",
                "answers": [
                  {
                    "id": "a1541231435891",
                    "text": "Can have public functions without a body",
                    "is_correct": false
                  },
                  {
                    "id": "a1541231454260",
                    "text": "Can have private functions without a body",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778598,
              "key": "22cc8763-631b-4184-a631-4fc6696f52c8",
              "title": "6",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "22cc8763-631b-4184-a631-4fc6696f52c8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the Keyword for creating the inheritance relations?",
                "answers": [
                  {
                    "id": "a1541231539810",
                    "text": "imports",
                    "is_correct": false
                  },
                  {
                    "id": "a1541231565232",
                    "text": "defines",
                    "is_correct": false
                  },
                  {
                    "id": "a1541231570460",
                    "text": "inherits",
                    "is_correct": false
                  },
                  {
                    "id": "a1541231574333",
                    "text": "is",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778599,
              "key": "324c84ae-6aac-4182-be2c-c12abb322291",
              "title": "7",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "324c84ae-6aac-4182-be2c-c12abb322291",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Is there something wrong with this?\n\ncontract SomeContract is AbstractContract, SomeInterface {\n     ....\n}\n",
                "answers": [
                  {
                    "id": "a1541231623511",
                    "text": "Yes",
                    "is_correct": false
                  },
                  {
                    "id": "a1541231645033",
                    "text": "No",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 778476,
          "key": "eccaa2ed-2b2f-4270-bd1c-e72103d93f2b",
          "title": "Events in Solidity",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eccaa2ed-2b2f-4270-bd1c-e72103d93f2b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783127,
              "key": "a82c073a-cc2c-4ebb-9b17-d64a19953386",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Events in Solidity\n---\nSolidity events are similar to Javascript events that can be set to trigger when something (i.e. an event) happens. This is a very powerful feature that will play a huge part when we create DApps (decentralized application)\n\nDApps, websites, or anything connected to Ethereum JSON-RPC API, can listen to these events and act accordingly. For example, we could create a banking DApp that listens for the user to click the deposit button. Once the button is clicked, the deposit event fires which will deposit the appropriate value into the assigned wallet address:\n```\nevent Deposit(address from, uint value);\n```\n\nLet's explore more in depth how to set up events and how to use them in your DApp. ",
              "instructor_notes": ""
            },
            {
              "id": 781919,
              "key": "ca531dc8-387e-4e8c-b168-9f1cac31787c",
              "title": "C4L3 Concept 17 Events V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "rmndEiHAkjE",
                "china_cdn_id": "rmndEiHAkjE.mp4"
              }
            },
            {
              "id": 782761,
              "key": "1603cc9b-e034-4fba-94fe-1d0c953687c5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n---\n#### Solidity Documentation\n>[Solidity documentation - Events](https://solidity.readthedocs.io/en/v0.5.3/contracts.html?highlight=interface#events)\n",
              "instructor_notes": ""
            },
            {
              "id": 814728,
              "key": "e4c3e7d2-1b25-4641-9603-78c7401e197d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e4c3e7d2-1b25-4641-9603-78c7401e197d",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814729,
              "key": "0c72ee58-1c93-42e7-a3fc-6024ebee96f3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\nIn this link you can find the contract example code updated:\n\n>[Events Contract Example](https://github.com/udacity/nd1309-work-code/blob/master/Course_Identity_And_Smart_Contracts/Smart_Contracts_With_Solidity/eventsContract.sol)\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 784075,
              "key": "0566f5ce-2757-4ce5-a7f6-c63edb5a8f98",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0566f5ce-2757-4ce5-a7f6-c63edb5a8f98",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 778600,
              "key": "38abf881-b8ef-4716-a1d1-586a38700011",
              "title": "1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "38abf881-b8ef-4716-a1d1-586a38700011",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Events generated by the Solidity contract are stored in the __________.",
                "answers": [
                  {
                    "id": "a1541231699242",
                    "text": "Local Node only",
                    "is_correct": false
                  },
                  {
                    "id": "a1541231714334",
                    "text": "Are not stored at all",
                    "is_correct": false
                  },
                  {
                    "id": "a1541231723664",
                    "text": "All ethereum nodes",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778601,
              "key": "4e88db49-51c2-4c72-9c05-7cfaae3cbd6b",
              "title": "2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4e88db49-51c2-4c72-9c05-7cfaae3cbd6b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Events are part of the __________.\n",
                "answers": [
                  {
                    "id": "a1541231786294",
                    "text": "Contract Definition",
                    "is_correct": false
                  },
                  {
                    "id": "a1541231797332",
                    "text": "ABI",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 782622,
          "key": "93fdc83b-cf96-416f-bcab-8b2513a7b7d0",
          "title": "What are Tokens?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "93fdc83b-cf96-416f-bcab-8b2513a7b7d0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 784100,
              "key": "7f3d850a-f26a-490d-bf5d-6ed955906556",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What are Tokens?\n---\nBy the end of this lesson, you will create your own token that you can send to any Ethereum address! But first, you might be wondering, what is a token? Let's talk through the purpose of tokens and how they are used in the Ethereum ecosystem.  ",
              "instructor_notes": ""
            },
            {
              "id": 784101,
              "key": "5bbe39f8-faae-46b5-b006-5482a6776940",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5bbe39f8-faae-46b5-b006-5482a6776940",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 783130,
              "key": "e3b5b126-f29d-4810-8162-1a6cb3f9cfdb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Ethereum DApps, Ether, and Tokens\nOne of the differentiating features of Ethereum is that it’s not just a currency, it’s a smart contract platform. This means that we can build projects and DAPPS (decentralized applications) on its blockchain via smart contracts.\n\nWhile Ethereum does have its own currency, ether, an important concept to understand is that they are different from tokens and they serve a different purpose. \n\n>**Ether** - The native currency of Ethereum used to power smart contracts\n\n>**Tokens** -  Built on the Ethereum platform can be used for exchanging value between different parties based on rules specified in that token's smart contract\n\n\n## CryptoKitties - Tokens as a Trade-able Good\nTokens in the Ethereum ecosystem can represent any fungible (replaceable) tradable good such as coins, loyalty points, gold certificates, IOUs or not fungible goods (unique collectibles)  such as in-game items, etc. The widely popular blockchain game [CryptoKitties](https://www.cryptokitties.co/) is an ideal example of fungible tokens. Each cryptokitty collectible is a unique digital asset - a token. This token can be claimed by an owner, sold, and bought. ",
              "instructor_notes": ""
            },
            {
              "id": 782629,
              "key": "d4fee708-1d33-4bee-a233-6d1f04071106",
              "title": "C4L3 Concept 18 What Is A Token V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "eU9CnNPyPiU",
                "china_cdn_id": "eU9CnNPyPiU.mp4"
              }
            },
            {
              "id": 783635,
              "key": "0c6add57-b0f7-44b4-88be-ba8ffd59aa85",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Recap\n---\n\n- Smart contracts are used to create Tokens. These smart contracts also facilitate transactions of tokens and record balances of tokens in an account.\n- After a token has been created, it can be traded, spent, or given to someone else.",
              "instructor_notes": ""
            },
            {
              "id": 784076,
              "key": "e1b8a8e1-0298-4557-88cc-e7673ddc75b3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e1b8a8e1-0298-4557-88cc-e7673ddc75b3",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784077,
              "key": "14908891-8d41-4b66-ae68-0a025af855c4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Resources\n---\n- [What is An Ethereum Token: The Ultimate Beginner’s Guide](https://blockgeeks.com/guides/ethereum-token/)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 782623,
          "key": "e24dae39-5c1a-4b6f-a160-6d01731d7973",
          "title": "ERC Token Standards",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e24dae39-5c1a-4b6f-a160-6d01731d7973",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783132,
              "key": "9c95ba40-ce1e-42b6-b93a-93c2168440ff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# ERC Token Standards\n---\nTo help us create tokens, Ethereum has created token standards, contracts which we can inherit that will help us setup a complete token. \n\nTo understand how to use these token standards, we will need to understand:\n- ERC (Ethereum Request for Comments)\n- Fungible vs. Non-fungible tokens\n- Different available token standards\n",
              "instructor_notes": ""
            },
            {
              "id": 784078,
              "key": "4463f3a6-dc72-45a0-b475-0156a1485129",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4463f3a6-dc72-45a0-b475-0156a1485129",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784082,
              "key": "0c3d2112-6d97-4f22-896c-93464b69ae52",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# ERC\n---\nEvery development project improves overtime and Ethereum is no exception. Similar to Bitcoin Improvement Proposals (BIPs), Ethereum has  Ethereum Improvement Proposals (EIPs). Ethereum Improvement Proposals ([EIPs](https://eips.ethereum.org/)) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.\n\nIncluded under EIPs are ERCs, Etherum Requests for Comments (a full list can be found [here](https://eips.ethereum.org/erc)). Some common ERCs resulted interfaces developers can use to create token. \nFor example, \n- [ERC-20](https://eips.ethereum.org/EIPS/eip-20) - A standard interface for *fungible* tokens.\n- [ERC-721](https://eips.ethereum.org/EIPS/eip-721) - A standard interface for *non-fungible* tokens, also known as deeds.\n\n##### Difference between Fungible and Non-Fungible Tokens\n---\nNow you might be wondering, what is the difference between fungible and non-fungible?\n\n##### Fungible Token\nA Fungible Token is a token, where all tokens are exactly the same. \n- They have the same value. \n- For example, any 1 dollar bill is equal to another 1 dollar bill.\n- All the widely used ERC-20 tokens are fungible tokens.\n\n##### Non-Fungible Token\nA Non-Fungible Token is a special type of cryptographic token which represents something unique.\n- Non-Fungible tokens are not interchangeable, because they all have a different value. \n- For example, if we represented real estate parcels in tokens, not all parcels would be equal in value, hence all these tokens will also not be equal in value.\n- ERC-721 is a non-fungible token standard.\n- The famous CryptoKitties Token is an ERC-721 non-fungible token.\n\n ",
              "instructor_notes": ""
            },
            {
              "id": 784084,
              "key": "2c6b7626-20a8-4a13-88e7-3454dcb23f75",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2c6b7626-20a8-4a13-88e7-3454dcb23f75",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784080,
              "key": "f8b90cb4-cb19-4033-800d-f4d13bf0b12e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Explore ERC Tokens\n---\nBefore we dive into code, let's explore what tokens currently exist. One of the best ways to see the most popular tokens in use is from [Etherscan's Token Tracker](https://etherscan.io/tokens). ",
              "instructor_notes": ""
            },
            {
              "id": 784079,
              "key": "9edc7b7b-4370-44de-a9c8-e7aca64436a7",
              "title": "Explore Deployed Tokens using Etherscan",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9edc7b7b-4370-44de-a9c8-e7aca64436a7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Visit the [etherscan website](https://etherscan.io/tokens), and find the Top 5 tokens on the list",
                "Find #1 Token in the list and make note of - the Total Supply and Contract Address"
              ],
              "positive_feedback": "At the time of this creation, the #1 token is [Binance](https://www.binance.com/en). \n*Total Supply:* 190,799,315 BNB ($1,504,844,786.39)\n*Contract Address:* https://etherscan.io/address/0xB8c77482e45F1F44dE1745F52C74426C631bDD52",
              "video_feedback": null,
              "description": "In addition to letting us checkout out transactions, Etherscan has a feature to show the top tokens. Let's explore this feature."
            },
            {
              "id": 783515,
              "key": "976da5a6-e8fc-4569-8406-0fd5c822b033",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/November/5beb75c8_etherscan/etherscan.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/976da5a6-e8fc-4569-8406-0fd5c822b033",
              "caption": "",
              "alt": "",
              "width": 3360,
              "height": 2100,
              "instructor_notes": null
            },
            {
              "id": 784081,
              "key": "6d810022-20d7-4112-bc2e-cc0acc9e9d8e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6d810022-20d7-4112-bc2e-cc0acc9e9d8e",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784083,
              "key": "c30967d7-1c73-47cc-9058-b1757703adf2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Different Available Token Standards\n---\nIn addition to ERC-20 and ERC-721, a number of other token standards have been created. A full list of ERCs can be found [here](https://eips.ethereum.org/erc). In this video, we will discuss a few of the most popular ERC standards used to create tokens:\n- ERC-20\n- ERC-223\n- ERC-621\n- ERC-721 \n- ERC-827",
              "instructor_notes": ""
            },
            {
              "id": 782630,
              "key": "828a454e-70aa-4268-a5b3-e9c580c60c11",
              "title": "C4L3 Concept 19 Token Standards V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "26-UA044P9s",
                "china_cdn_id": "26-UA044P9s.mp4"
              }
            },
            {
              "id": 784085,
              "key": "73c38a47-03de-4b64-a791-909b25bb8be2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/73c38a47-03de-4b64-a791-909b25bb8be2",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784086,
              "key": "3dba9fa1-6a6a-4b21-80a3-7b7a1f257c46",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Explore ERC-721 Tokens\n---\nEarlier, you explored the top tokens from [Etherscan's Token Tracker](https://etherscan.io/tokens), but those were just the top ERC-20 tokens!\nNow, let's explore the top ERC-721 Tokens. ",
              "instructor_notes": ""
            },
            {
              "id": 784087,
              "key": "806ccb5b-5475-454a-a6fd-2f471bda08ae",
              "title": "Explore ERC-721 Tokens using Etherscan",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "806ccb5b-5475-454a-a6fd-2f471bda08ae",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Visit the [list of top ERC-721 tokens](https://etherscan.io/tokens-nft), and find the Top token on the list",
                "Find #1 Token in the list and make note of - the Total Supply and Contract Address"
              ],
              "positive_feedback": "At the time of this creation, the #1 token is [CryptoKitties](https://www.cryptokitties.co/). \n*Total Supply:* 1,190,403 CK ($0.00)\n*Contract Address:* https://etherscan.io/address/0x06012c8cf97bead5deae237070f9587f8e7a266d",
              "video_feedback": null,
              "description": "Let's jump back in Etherscan an checkout the top ERC-721 tokens."
            },
            {
              "id": 783647,
              "key": "c18f49c9-b7bb-48a8-8d31-d7b293e4645f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Interesting Facts\n---\n - The famous CryptoKitties Token, is still the * #1 * token, as of making this lesson.\n - You can find out which ethereum address holds how many tokens, as you see in the screen below. This all is due to the fact that everything on blockchain is viewable by anyone.",
              "instructor_notes": ""
            },
            {
              "id": 783641,
              "key": "19494814-0bba-4f31-8323-808f6b6dda43",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/November/5bec790d_721/721.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/19494814-0bba-4f31-8323-808f6b6dda43",
              "caption": "",
              "alt": "",
              "width": 3360,
              "height": 2100,
              "instructor_notes": null
            },
            {
              "id": 783648,
              "key": "cf3117c1-d67e-49e6-8464-88c1e127812a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/November/5bec7ac1_721-1/721-1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cf3117c1-d67e-49e6-8464-88c1e127812a",
              "caption": "",
              "alt": "",
              "width": 3360,
              "height": 2100,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 782624,
          "key": "e987f2c0-addc-470b-b180-d72139d1e71b",
          "title": "ERC-20 Walk-through",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e987f2c0-addc-470b-b180-d72139d1e71b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783133,
              "key": "e476d401-2cb6-4468-b556-fe01cddf2cb7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# ERC-20 Walk-through\n---\nWe're on our way to creating our very own token!\n\nFor our mini-project, you will create your very own token using the ERC-20 standard. In this concept, we will cover the 6 mandatory functions, 2 events and 3 optional fields that need to be implemented in any contract that implements the ERC-20 interface. \n\n**Note**: To follow along with the code explained in the **Instructor Code** section you will need to have the latest version of Truffle (v5.0.2) and OpenZeppelin (v2.0.0)\n",
              "instructor_notes": ""
            },
            {
              "id": 782631,
              "key": "c5ed27bc-93f3-44b7-8f9d-b30605a4cc97",
              "title": "C4L3 Concept 20 ERC Walkthrough Part 1 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "kBLVjENeXcQ",
                "china_cdn_id": "kBLVjENeXcQ.mp4"
              }
            },
            {
              "id": 784088,
              "key": "392a2940-9a2f-4837-a6ae-14a2b1fbf0cd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## ERC-20 Functions\n---\nNow, let's walk-through the 6 mandatory functions in detail when inheriting from the ERC-20 contract. ",
              "instructor_notes": ""
            },
            {
              "id": 782632,
              "key": "f2ba62d8-300e-45ed-9b6a-99075bc3d6bd",
              "title": "C4L3 Concept 20 ERC Walkthrough Part 2 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "UU1ficO0lBc",
                "china_cdn_id": "UU1ficO0lBc.mp4"
              }
            },
            {
              "id": 782658,
              "key": "be4a07f2-93b9-4533-98f6-735ba6f9a71a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### ERC-20 Token Interface\nThe [ERC-20 Token interface](https://eips.ethereum.org/EIPS/eip-20) has 3 optional fields, 2 events, and 6 mandatory functions:\n\n- Optional Fields\n   - Name of the token\n   - Symbol of the token\n   - Decimals values in tokens\n- Events\n   - transfer event\n   - approve event\n- Mandatory Functions\n   - totalSupply ( ) function\n   - balanceOf ( ) function\n   - transfer ( ) function\n   - transferFrom ( ) function\n   - approve ( ) function\n   - allowance ( ) function",
              "instructor_notes": ""
            },
            {
              "id": 814579,
              "key": "f679e75a-488f-46f5-a6f0-65dfa58aa244",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f679e75a-488f-46f5-a6f0-65dfa58aa244",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814580,
              "key": "653978f4-bdf8-4454-a607-8bc850d24187",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\n---\n\nERC-20 Token Interface Code\n\n```\npragma solidity >=0.4.24;\n\ncontract ERC20Interface {\n\n    string public constant name = \"Udacity Token\";\n    string public constant symbol = \"UDC\";\n    uint8 public constant decimals = 18;  // 18 is the most common number of decimal places\n    \n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    \n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n\n}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 782625,
          "key": "20f3941a-c25a-4530-9060-97864f58d3d2",
          "title": "Creating ERC-20 using Remix",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "20f3941a-c25a-4530-9060-97864f58d3d2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783134,
              "key": "7dd8f6d4-4481-429f-b30c-2aba02936c78",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Creating ERC-20 Using Remix\n---\nPreviously, we walked through all the parts of an ERC-20 interface. Now, we will implement this interface and create our very own token!",
              "instructor_notes": ""
            },
            {
              "id": 782633,
              "key": "eca2d0bf-6582-461e-b863-fe35cca4139d",
              "title": "C4L3 Concept 21 ERC20 Using Remix V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "_6Wv_D8p9n4",
                "china_cdn_id": "_6Wv_D8p9n4.mp4"
              }
            },
            {
              "id": 814581,
              "key": "7633b047-a926-4a7d-af4e-bfbe5bba7f37",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7633b047-a926-4a7d-af4e-bfbe5bba7f37",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 783654,
              "key": "9fcb0166-1acb-4c5b-8bd6-efca54fc4038",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\n---\n```\npragma solidity >=0.4.24;\n\ncontract myToken {\n\n    string public constant name = \"Udacity Token\";\n    string public constant symbol = \"UDC\";\n    uint8 public constant decimals = 18;  // 18 is the most common number of decimal places\n    uint _totalSupply;\n\n    // Balances for each account stored using a mapping\n    mapping(address => uint256) balances;\n\n    // Owner of the account approves the allowance of another account\n    // Create an allowance mapping\n    // The first key is the owner of the tokens\n    // In the 2nd mapping, its says who can spend on your behalf, and how many\n    // So, we are creating a mapping, where the kep is an address,\n    // The value is further a mapping of address to amount\n    mapping(address => mapping (address => uint256)) allowance;\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n\n    // Called automatically when contract is initiated\n    // Sets to total initial _totalSupply, as per the input argument\n    // Also gives the initial supply to msg.sender...who creates the contract\n    constructor(uint amount) public {\n        _totalSupply = amount;\n         balances[msg.sender] = amount;\n    }\n\n    // Returns the total supply of tokens\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    // Get the token balance for account `tokenOwner`\n    // Anyone can query and find the balance of an address\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    // Transfer the balance from owner's account to another account\n    // Decreases the balance of \"from\" account\n    // Increases the balance of \"to\" account\n    // Emits Transfer event\n    function transfer(address to, uint tokens) public returns (bool success) {\n        if(tokens < 1){\n            revert(\"Not enough Ether provided.\");\n        }\n        require(tokens <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender] - tokens;\n        balances[to] = balances[to] + tokens;\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    // Send amount of tokens from address `from` to address `to`\n    // The transferFrom method is used to allow contracts to spend\n    // tokens on your behalf\n    // Decreases the balance of \"from\" account\n    // Decreases the allowance of \"msg.sender\"\n    // Increases the balance of \"to\" account\n    // Emits Transfer event\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from] - tokens;\n        allowance[from][msg.sender] = allowance[from][msg.sender] - tokens;\n        balances[to] = balances[to] + tokens;\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    // Approves the `spender` to withdraw from your account, multiple times, up to the `tokens` amount.\n    // So the msg.sender is approving the spender to spend these many tokens\n    // from msg.sender's account\n    // Setting up allowance mapping accordingly\n    // Emits approval event\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowance[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 784089,
              "key": "ca4f1b66-12dc-4618-9f69-606450b56955",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ca4f1b66-12dc-4618-9f69-606450b56955",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 783655,
              "key": "d89acfe7-5878-4458-8b1e-9ccceba5cd2c",
              "title": "Implement Error Handling",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d89acfe7-5878-4458-8b1e-9ccceba5cd2c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "In the token contract, implement Error Handling.",
                "Inside the transfer function, write a require statement to make sure that the sender's account's balance is greater than the value of the tokens that need to be sent to the \"to\" account."
              ],
              "positive_feedback": "````function transfer(address to, uint tokens) public returns (bool success) {\n        require(tokens <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender] - tokens;\n        balances[to] = balances[to] + tokens;\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n````",
              "video_feedback": null,
              "description": "As a challenge, implement Error Handling in your token contract."
            }
          ]
        },
        {
          "id": 782627,
          "key": "84d298b9-f5bc-4c46-9fd3-1070235d518f",
          "title": "Creating ERC-20 using OpenZeppelin",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "84d298b9-f5bc-4c46-9fd3-1070235d518f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783135,
              "key": "b48727e2-0d0a-4d9c-9eab-020342c49720",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Creating ERC-20 Using OpenZeppelin\n---\n*In this concept, you'll get to create and send your very own tokens from start to finish!*\n\nPreviously, we walked you through creating your own token from scratch. We will now show you how you can use [OpenZeppelin](https://openzeppelin.org/), a library of Ethereum smart contracts, to create tokens even more easily using the [OpenZeppelin's ERC-20 contract](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20.sol). \n\nHere's what we will do in this concept:\n\n1. Create an ERC-20 token using OpenZeppelin\n2. Use Truffle to compile and deploy the token contract to a locally running ethereum network\n3. Use Infura and Truffle to deploy the token contract to the Rinkeby Public Test Network\n4. Once our contract is deployed on Rinkeby, find our deployed token on Etherscan\n5. Then, we will use Metamask to import this token\n6. Finally, we will send the token to any ethereum address using Metamask!\n\nThe complete exercise can be download from the [ND Program Github Repository](https://github.com/udacity/nd1309-work-code/tree/master/Course_Identity_And_Smart_Contracts/SampleToken) remember you will need to have the latest version of Truffle (v5) installed.",
              "instructor_notes": ""
            },
            {
              "id": 784092,
              "key": "4e073458-cbe4-4a11-8f52-c8adfe345a77",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4e073458-cbe4-4a11-8f52-c8adfe345a77",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784090,
              "key": "3fcad330-6ca9-4629-b41c-28295a882524",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Creating ERC-20 Token Using OpenZeppelin\n---\nLet's start by creating an ERC-20 token using OpenZeppelin. \n",
              "instructor_notes": ""
            },
            {
              "id": 782634,
              "key": "932825fc-8000-455c-933b-99b50af29d46",
              "title": "C4L3 Concept 22 ERC20 Using OpenZeppelin Part 1 V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "5bdXpgL93-o",
                "china_cdn_id": "5bdXpgL93-o.mp4"
              }
            },
            {
              "id": 814731,
              "key": "7abd6d9e-44c0-4765-ad74-96300482ca70",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0adf3d_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7abd6d9e-44c0-4765-ad74-96300482ca70",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 782642,
              "key": "7122f20e-efd9-4d69-8b01-18458b432fe8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\n---\n\nGet started with the exercise, remember you will need to have installed the latest version of Truffle (v5)\n\n1) Verify you have the Truffle (v5.0.2) latest installed if not use the command `npm install -g truffle`\n\n2) Use `mkdir SampleToken` to create a directory\n\n3) `cd SampleToken`\n\n4) Run the command: `truffle init` to initialize a truffle project.\n\n5) Run `npm install --save truffle-hdwallet-provider` used to set up the provider to connect to the Infura Node\n\n6) Run `npm install openzeppelin-solidity`\n\n7) Go into your **contracts** folder, and create your token smart contract file **SampleToken.sol**\n\n\n#### Code for SampleToken.sol\n\n```\npragma solidity >=0.4.24;\n\nimport \"../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\nimport \"../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\";\n\ncontract SampleToken is ERC20Detailed, ERC20 {\n    \n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint _initialSupply) \n    ERC20Detailed(_name, _symbol, _decimals) public {\n        require(_initialSupply > 0, \"INITIAL_SUPPLY has to be greater than 0\");\n        _mint(msg.sender, _initialSupply);\n    }\n}\n```\n\nIf you see my code there are huge differences from the one explained in the video, check inside the `/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol` in your project for more information.\n\nOne important thing that it is worth to remark is that `_mint(msg.sender, _initialSupply);` internally assigned the initial supply values without having to do the trick the instructor is showing in the video and it will not work on the latest version of the tools and libraries you will use.\n",
              "instructor_notes": ""
            },
            {
              "id": 784093,
              "key": "7c92de93-3450-4573-8ce9-4d96ff583cc6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7c92de93-3450-4573-8ce9-4d96ff583cc6",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784091,
              "key": "00869821-e67b-4bec-934d-7b95259dd339",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Setup Infura and Metamask\n---\nIn the previous video, we imported OpenZeppelin contract to help us write our token contract. Now, get ready to deploy our token contract Rinkeby Public Test Network by getting our Infura seed. Then we can setup Metamask so we can send the token to any ethereum address. ",
              "instructor_notes": ""
            },
            {
              "id": 782637,
              "key": "ee4845be-61dc-4a67-91f7-61a4d559690a",
              "title": "C4L3 Concept 22 ERC20 Using OpenZeppelin Part 2 V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "**Note**: This video was recorded using a version that it is outdated, the code below in the Instructor Code section has an updated version of the code.",
              "video": {
                "youtube_id": "2gl2Mp73mFc",
                "china_cdn_id": "2gl2Mp73mFc.mp4"
              }
            },
            {
              "id": 782641,
              "key": "a9602fd0-6e06-4480-aac4-f11505d32547",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n## Steps to Get Started with Infura\n\n- Go to https://infura.io\n\n\n- Click on “Get Started for FREE”.\n- Once you sign up, you will be sent an email.\n- Confirm your email address.\n\n\n- Now go back to the Infura website, to get the API key\n- The easiest way is to click on “Learn How Infura Works” as seen below\t\n- Click on “Skip” button that you see on the screen\n- Then click on “Create New Project” as seen below:\n- Give any name to your project…\n- Now, from the endpoint, copy the link for whichever network’s node you would want to connect to, for example, Rinkeby.",
              "instructor_notes": ""
            },
            {
              "id": 814738,
              "key": "65c24e4d-7d8b-425f-8cd2-cfe85ed6281e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\n---\n\nThis is the code you need for the **truffle-config.js** file set up:\n\n```\nconst HDWalletProvider = require('truffle-hdwallet-provider');\nconst infuraKey = \"<Infura PROJECT ID>\";\n//\n// const fs = require('fs');\nconst mnemonic = \"<METAMASK SEED>\";\n\nmodule.exports = {\n\n  networks: {\n    development: {\n      host: \"127.0.0.1\",     // Localhost (default: none)\n      port: 9545,            // Standard Ethereum port (default: none)\n      network_id: \"*\",       // Any network (default: none)\n     },\n    // Useful for deploying to a public network.\n    // NB: It's important to wrap the provider as a function.\n    rinkeby: {\n      provider: () => new HDWalletProvider(mnemonic, `https://rinkeby.infura.io/v3/${infuraKey}`),\n        network_id: 4,       // rinkeby's id\n        gas: 4500000,        // rinkeby has a lower block limit than mainnet\n        gasPrice: 10000000000\n    },\n  },\n\n  // Set default mocha options here, use special reporters etc.\n  mocha: {\n    // timeout: 100000\n  },\n\n  // Configure your compilers\n  compilers: {\n    solc: {\n      // version: \"0.5.1\",    // Fetch exact version from solc-bin (default: truffle's version)\n      // docker: true,        // Use \"0.5.1\" you've installed locally with docker (default: false)\n      // settings: {          // See the solidity docs for advice about optimization and evmVersion\n      //  optimizer: {\n      //    enabled: false,\n      //    runs: 200\n      //  },\n      //  evmVersion: \"byzantium\"\n      // }\n    }\n  }\n}\n\n```",
              "instructor_notes": ""
            },
            {
              "id": 784094,
              "key": "f623d1db-534c-40cd-a1cd-b8826e6664ae",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f623d1db-534c-40cd-a1cd-b8826e6664ae",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784095,
              "key": "782380a5-1606-481c-83e4-8a1b75ee0a57",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Deploy ERC-20 Token Contract Locally\n---\nWith our smart contract created and setup done, now's the fun part. Let's deploy!\nWe will first use Truffle to compile and deploy the token contract to a locally running ethereum network. ",
              "instructor_notes": ""
            },
            {
              "id": 782638,
              "key": "483f311f-d6d6-4d90-b55f-4f4a07845a93",
              "title": "C4L3 Concept 22 ERC20 Using OpenZeppelin Part 3 V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dYwuv9coVLw",
                "china_cdn_id": "dYwuv9coVLw.mp4"
              }
            },
            {
              "id": 782644,
              "key": "0e352121-78b6-4bb1-9bd6-bdaf32d3d0d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\n---\nConfiguring the migration file\n\nTo be able to deploy your token you will need to create a file in the **migrations** folder create a new file **2_initial_migration.js**\n\nAnd we are going to add this code:\n\n```\nvar SampleToken = artifacts.require(\"SampleToken\");\n\nmodule.exports = function(deployer) {\n  deployer.deploy(SampleToken, \"UdacityExampleToken\", \"UET\", 18, 1000);\n};\n```\n\nIn this code, we are deploying our contract passing the parameters we specified in the Contract constructor.\n\n### Steps to run a local ethereum network, and deploy your token contract to this local network\n\n    1) Open a Terminal window, and make sure you are inside your project directory\n\n    2) Run the command `truffle develop` (to run a local ethereum network)\n    \n    3) Use the command `compile` (to compile your solidity contract files)\n\n    4) Use the command `migrate --reset` (to deploy your contract to the locally running ethereum network)\n \n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 784096,
              "key": "4cb78b86-a1b4-4f1b-b99a-e7eec57ba0f4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4cb78b86-a1b4-4f1b-b99a-e7eec57ba0f4",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 784097,
              "key": "0bc9e07f-c610-4264-ab71-be62eb5d4ce8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Deploy Token Contract on Rinkeby\n---\n#### Get Tokens from Public Faucet\n---\nBefore we can deploy our contract on Rinkeby, we need to make sure have enough ethers. To get our ethers in the test network, we will get some ether from a public faucet. We will walk-through how to deploy our contract on Rinkeby. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 782635,
              "key": "0e7284b5-be64-49b3-8336-483a17fd2898",
              "title": "C4L3 Concept 22 ERC20 Using OpenZeppelin Part 4 V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xY6ag7a9xuQ",
                "china_cdn_id": "xY6ag7a9xuQ.mp4"
              }
            },
            {
              "id": 782640,
              "key": "135506b5-f86d-489b-bec6-5c2552a4b29a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### To request ethers, \nhttps://faucet.rinkeby.io/\n\n#### To post on Google Plus to get ethers\nhttps://plus.google.com/\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 784099,
              "key": "b58a9955-74fb-4c8b-b5cd-0ee646f609fe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Deploy Contract and Send Tokens\n---\nNow that we have enough ethers our Rinkeby account, let's deploy our token contract to the Rinkeby network! Once deployed, we can use the contract to find our contract on Etherscan. Finally, we will wrap it up by using Metamask to transfer the tokens we created between Ethereum accounts!",
              "instructor_notes": ""
            },
            {
              "id": 783627,
              "key": "dc80df44-7ed8-4883-b582-b5bfebc08ca8",
              "title": "C4L3 Concept 22 ERC20 Using OpenZeppelin Part 5 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sdk_OOLdgNI",
                "china_cdn_id": "sdk_OOLdgNI.mp4"
              }
            },
            {
              "id": 783628,
              "key": "0e808092-a83d-4015-bf73-9aa92f2f4da7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructor Code\n---\nCommand to deploy to Rinkeby using truffle\n\n`truffle migrate --reset --network rinkeby`\n\nIf you are using the latest version of Truffle and Metamask once you deploy your contract to Rinkeby network it will appear automatically in the account it uses to deploy the Contract.\n\nThe complete exercise can be download from the [ND Program Github Repository](https://github.com/udacity/nd1309-work-code/tree/master/Course_Identity_And_Smart_Contracts/SampleToken) remember you will need to have the latest version of Truffle (v5) installed.\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 782626,
          "key": "e4c3309b-17bf-4b89-94da-8beb6c612bbb",
          "title": "Mini Project: Send your ERC-20 Tokens to Udacity",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e4c3309b-17bf-4b89-94da-8beb6c612bbb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 782628,
              "key": "6fffa1fd-c09e-4207-a4a3-432263e9a920",
              "title": "Create your ERC-20 Tokens and Send them to Udacity's Address",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6fffa1fd-c09e-4207-a4a3-432263e9a920",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create your ERC-20 Tokens",
                "Deploy them to the Rinkeby Network",
                "Get your Transaction Hash and view it on Etherscan"
              ],
              "positive_feedback": "Congratulations! If you were able to successfully finish the mini project above, you have now learnt how to create your own Tokens on the Ethereum Network!",
              "video_feedback": null,
              "description": "This is a mini project, that we would like you to try. It is not required for graduation, but many of these concepts will help you in upcoming projects as well as be instrumental in projects you work on after you graduate from this program. \n\nYou will use a public test network for this project."
            }
          ]
        },
        {
          "id": 783657,
          "key": "09c319dd-021d-43ea-a250-49d8ee4ea13d",
          "title": "Congratulations on Learning Solidity",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "09c319dd-021d-43ea-a250-49d8ee4ea13d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783664,
              "key": "e406c42e-8c3e-41f9-b2ad-45c128f83cdb",
              "title": "C4L3-24 Lesson Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "GPKyPnzbXGc",
                "china_cdn_id": "GPKyPnzbXGc.mp4"
              }
            },
            {
              "id": 783679,
              "key": "ddce6fb5-0b50-4926-a809-bb86785e0979",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Congratulations on finishing this Lesson\n\n- You now know how to write Smart Contract using Solidity, as the programming language.\n- You also know, how to create your own ERC-20 tokens and send them to any ethereum address.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}