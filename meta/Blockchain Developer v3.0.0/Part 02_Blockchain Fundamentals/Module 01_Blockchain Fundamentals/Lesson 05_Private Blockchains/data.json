{
  "data": {
    "lesson": {
      "id": 668128,
      "key": "bad0043c-5c20-4201-a7c7-4112d3253f6c",
      "title": "Private Blockchains",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn how to interact between private/public Blockchains and apply the Blockchain data model to create your own private Blockchain.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/bad0043c-5c20-4201-a7c7-4112d3253f6c/668128/1555417396844/Private+Blockchains+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/bad0043c-5c20-4201-a7c7-4112d3253f6c/668128/1555417389698/Private+Blockchains+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 668254,
          "key": "24197b75-77c9-476b-9595-7a1fe086d19b",
          "title": "Lesson Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "24197b75-77c9-476b-9595-7a1fe086d19b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 669038,
              "key": "26b53353-a440-4880-9a1b-818054f2932f",
              "title": "Lesson Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "L4yqJ3NrVzI",
                "china_cdn_id": "L4yqJ3NrVzI.mp4"
              }
            },
            {
              "id": 679927,
              "key": "8566e9b6-1d27-4dd5-a1e9-bc2ad99ca55b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Overview\nIn this lesson, we'll discuss the usage of private and public blockchains. We'll also go over how to interact between these 2 chains. To start the lesson, we'll go over some basic ideas, then later you'll go through the process of coding this interaction for yourself.\n\n### Public and Private Blockchains\nCompare and contrast a public blockchain vs a private blockchain and discuss methods for cross-chain functionality. \n\n### Building a Simple Private Blockchain\n\nBuild from scratch a simple private blockchain that creates new blocks, stores data in blocks, and secures blocks with a digital signature using a one-way hash.\n\nTo **Build a Simple Private Blockchain**, we'll work through 6 different parts that, once completed, will have you up and running with the core ideas behind building a simple private blockchain.\n\n\n> **Part 1:** Block Data Model\n\n> **Part 2:** Create New Blocks\n\n> **Part 3:** Store Blocks\n\n> **Part 4:** Linking Blocks\n\n> **Part 5:** Block Height and Timestamp\n\n> **Part 6:** LevelDB to Persist Data\n\n### Follow the code sessions local\n\nIf you want to follow the code from your own computer you can do it cloning or downloading the program [Github Repository](https://github.com/udacity/nd1309-work-code), and follow the path: nd1309-work-code/Course_Blockchain_Data/Practice_Private_Blockchain_Code_Session/\n\n### Complementary learning resources\n<ul>\n     <li><a href=\"https://www.udacity.com/course/javascript-promises--ud898\" target=\"_blanck\">JavaScript Promises</a></li>\n    <li><a href=\"https://www.udacity.com/course/es6-javascript-improved--ud356\" target=\"_blanck\">ES6 - JavaScript Improved</a></li>\n</ul>\nI've really enjoyed making this lesson and hope you have a great experience building your own private blockchain!\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 668255,
          "key": "5e57db43-0cbc-44e8-abef-579014cdc275",
          "title": "Public and Private Blockchains",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5e57db43-0cbc-44e8-abef-579014cdc275",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 669039,
              "key": "1025791c-95ec-40b4-b869-dd0c1128de29",
              "title": "Public And Private Blockchains",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7prXCvNo6hc",
                "china_cdn_id": "7prXCvNo6hc.mp4"
              }
            }
          ]
        },
        {
          "id": 668256,
          "key": "a21c54f7-f4c0-4d9f-95ed-69469de2cd30",
          "title": "Public and Private Blockchain Interaction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a21c54f7-f4c0-4d9f-95ed-69469de2cd30",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 669040,
              "key": "4e705366-e9f0-49b7-8c8b-2cbd25ec259c",
              "title": "Public And Private Blockchain Interaction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rNANX-FF6tI",
                "china_cdn_id": "rNANX-FF6tI.mp4"
              }
            }
          ]
        },
        {
          "id": 668257,
          "key": "4f8bb5b3-9bbf-403d-9479-dad80615c0f4",
          "title": "Build a Simple Private Blockchain",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4f8bb5b3-9bbf-403d-9479-dad80615c0f4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 669041,
              "key": "f9a05810-c797-4699-bfda-1480331a5344",
              "title": "Building A Simple Private Blockchain",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "F0NiiTTJstc",
                "china_cdn_id": "F0NiiTTJstc.mp4"
              }
            }
          ]
        },
        {
          "id": 701778,
          "key": "ebfa93c6-df90-4abf-82f3-eb4009783e01",
          "title": "Working with Your Workspace",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ebfa93c6-df90-4abf-82f3-eb4009783e01",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 701787,
              "key": "70a379ba-8527-45fa-9ec1-c4e0d439d416",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Working with Your Workspace\n\n---\n\nQuick note before we continue.\n\nIn the remainder of this lesson Brandy will walk you through how to code your own simple private blockchain. Accompanied with each video walk-through is an in-classroom workspace where you code along. \n\n## Setup Suggestion\n---\nSome students have found it helpful to have the lesson concept opened in two windows so that they can watch the video and code side-by-side. \n\n**First, collapse the table of contents: **\n",
              "instructor_notes": ""
            },
            {
              "id": 701782,
              "key": "8ea9fc99-c2d6-49a8-a205-a64f9ec0af76",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b837968_screen-shot-2018-08-26-at-9.06.41-pm/screen-shot-2018-08-26-at-9.06.41-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8ea9fc99-c2d6-49a8-a205-a64f9ec0af76",
              "caption": "",
              "alt": "Collapse the table of contents",
              "width": 1058,
              "height": 610,
              "instructor_notes": null
            },
            {
              "id": 701783,
              "key": "1c0b975a-89ac-4db8-87aa-a35277f10a36",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "** Then, view the code walk-through and workspace side-by-side:**",
              "instructor_notes": ""
            },
            {
              "id": 701784,
              "key": "35b9db80-6e2d-48d4-9fc0-5f2fefa6e8e8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b838cc3_screen-shot-2018-08-26-at-10.31.26-pm/screen-shot-2018-08-26-at-10.31.26-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/35b9db80-6e2d-48d4-9fc0-5f2fefa6e8e8",
              "caption": "",
              "alt": "View the video and workspace side-by-side",
              "width": 1196,
              "height": 746,
              "instructor_notes": null
            },
            {
              "id": 701788,
              "key": "ed5fb0da-0484-4831-9b35-5ef46fd231fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "With that covered, have fun coding your first private blockchain!",
              "instructor_notes": ""
            },
            {
              "id": 701789,
              "key": "a6bdf1d8-8830-4cc8-9e8e-ba86d2bcc744",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Unable to Access Your Workspace?\n\n---\n\nIf you are unable to access your Workspace in the Classroom it could be because you have \"3rd Party Cookies\" disabled in your browser. Workspaces need to set a \"3rd party cookie\" to enable access.\n\nCheck out this [Workspace troubleshooting FAQ](https://udacity.zendesk.com/hc/en-us/articles/115004653246) for information on how to enable 3rd party cookies for your browser.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 663491,
          "key": "c6314afb-b23a-4685-a84a-168c9efa27d2",
          "title": "Block Data Model",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c6314afb-b23a-4685-a84a-168c9efa27d2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 701792,
              "key": "581db87a-1a0e-44fe-ba37-b18e3bcb3032",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Block Data Model \n\n---\nIn this section, we'll setup our basic block data model in json. ",
              "instructor_notes": ""
            },
            {
              "id": 663858,
              "key": "13e5206e-d348-4b66-b292-c78b0c83cf72",
              "title": "03.1 SC Block Data Model",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rAQK2Qgrtpo",
                "china_cdn_id": "rAQK2Qgrtpo.mp4"
              }
            },
            {
              "id": 663882,
              "key": "dbf22ff6-6330-4936-a7c5-e60dcc74235f",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view5ae929b3",
              "pool_id": "webterminal",
              "view_id": "1a83a25e-623e-4134-a118-5bbbcff3771d",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 701791,
              "key": "b467e2d2-03f4-4bd3-9196-917b58c130c0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Recap\n---\nThis is the start of a block data model we created in`notes.txt`:\n\n```json\n{ // Block data model\n   \"hash\": \"000000000000e198e04b0759cfecd59a95604cc551db9ad3b12a290375a95419\",\n   \"height\": 1325438,\n   \"body\": [\n   ],\n   \"time\": ,\n   \"previousblockhash\": \"\"\n }\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 663492,
          "key": "b1540463-631d-401a-a24e-f6d919e38aca",
          "title": "Create New Blocks",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b1540463-631d-401a-a24e-f6d919e38aca",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 701794,
              "key": "34043869-eed0-40fb-8eb7-735e1b48b790",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Create New Blocks\n---\nIn this section, we will create a class that creates Blocks based off the block data model we previously setup. \n",
              "instructor_notes": ""
            },
            {
              "id": 663927,
              "key": "b1e2cb2f-a085-4fa9-b621-723c17e86bc2",
              "title": "03.2 SC Create New Blocks",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Ma96H_3_Pjw",
                "china_cdn_id": "Ma96H_3_Pjw.mp4"
              }
            },
            {
              "id": 663992,
              "key": "1a9434e8-c343-4b32-9e76-abff60fc7bfc",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view5ae929b3",
              "pool_id": "webterminal",
              "view_id": "4b483ad0-08c2-4c14-9014-2183e70790a1",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 701793,
              "key": "806c0c48-7a4e-449d-b837-b693ba85eba6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Recap\n---\n\nIn this section, we copied a block data model, modified to suit our needs, and finally created simpleChain.js with a Block class, Constructor, and related Variables. \n\nIn `simpleChain.js`, we set up a class with a constructor for a block data model:\n\n```javascript\n\n/* ===== Block Class ===================================\n|  Class with a constructor for block data model       |\n|  ====================================================*/\n\nclass Block {\n  constructor(data){\n    this.height = '';\n    this.timeStamp = '';\n    this.data = data;\n    this.previousHash = '0x';\n    this.hash = '';\n  }\n}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 663493,
          "key": "ef5e140b-6c7f-4ae5-9a28-111d1582980c",
          "title": "Store Blocks",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ef5e140b-6c7f-4ae5-9a28-111d1582980c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 701798,
              "key": "79b51000-d993-494b-bb07-b8daf1b1ecf2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Store Blocks\n---\nAfter creating our Block class, we now need to construct our blockchain to store blocks. ",
              "instructor_notes": ""
            },
            {
              "id": 663931,
              "key": "0218730c-1465-44e0-95aa-d51efa9a183c",
              "title": "03.3 SC Store Blocks",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ntVc-pXXa5A",
                "china_cdn_id": "ntVc-pXXa5A.mp4"
              }
            },
            {
              "id": 663995,
              "key": "ed5190d0-ec39-4b21-8fe3-443118e62ac9",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view5ae929b3",
              "pool_id": "webterminal",
              "view_id": "3af875d5-3fa5-4253-adf0-d0e6e21d3790",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 701796,
              "key": "527b3a10-b31c-411b-9896-15ddfbb132fc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Recap\n---\n\nWe created a new blockchain class with a constructor to store data within the chain array. Then, we created the addBlock function to push the newBlock to the chain.\n\nAfter adding the Blockchain class, this is what `simpleChain.js` looks like now:\n\n```javascript\n/* ===== Block Class ===================================\n|  Class with a constructor for block data model       |\n|  ====================================================*/\n\nclass Block {\n  constructor(data){\n    this.height = '';\n    this.timeStamp = '';\n    this.data = data;\n    this.previousHash = '0x';\n    this.hash = '';\n  }\n}\n\n/* ===== Blockchain ===================================\n|  Class with a constructor for blockchain data model  |\n|  with functions to support:                          |\n|     - createGenesisBlock()                           |\n|     - getLatestBlock()                               |\n|     - addBlock()                                     |\n|     - getBlock()                                     |\n|     - validateBlock()                                |\n|     - validateChain()                                |\n|  ====================================================*/\n\nclass Blockchain{\n    constructor(){\n      // new chain array\n      this.chain = [];\n  }\n\n  // addBlock method\n  addBlock(newBlock){\n     this.chain.push(newBlock);\n  }\n}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 663494,
          "key": "5673c38b-3460-4bee-a661-28e5ba05c993",
          "title": "Link Blocks",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5673c38b-3460-4bee-a661-28e5ba05c993",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 701800,
              "key": "cdd8c306-14cb-4c22-9f32-18a65ed7ac75",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Link Blocks\n---\nIn this section, our task is to secure blocks in a chain using the sha256 algorithm to hash block data.\n",
              "instructor_notes": ""
            },
            {
              "id": 663935,
              "key": "d1515770-7d78-4188-87da-76805e6d2248",
              "title": "03.4 SC Linking Blocks",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "45q3-1n2RcE",
                "china_cdn_id": "45q3-1n2RcE.mp4"
              }
            },
            {
              "id": 664001,
              "key": "b26c11c4-cbfd-4f9c-abd1-f955de5f5ac3",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view5ae929b3",
              "pool_id": "webterminal",
              "view_id": "93dffbcb-e906-47da-8051-1254b8a7ff0f",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 701799,
              "key": "b70e00b2-90cd-45c7-b902-99911434e36c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Recap\n---\nTo setup the crypto-js library, in the terminal we used:\n```\nnpm install crypto-js —save\n```\n\nIn `simpleChain.js`, \n- Configured crypto-js library\n- In Blockchain class, modified constructor to included new genesis block \n- Modified addBlock function to include generation of our block hash.\n\n```javascript\n/* ===== SHA256 with Crypto-js ===================================\n|  Learn more: Crypto-js: https://github.com/brix/crypto-js      |\n|  =============================================================*/\n\nconst SHA256 = require('crypto-js/sha256');\n\n/* ===== Block Class ===================================\n|  Class with a constructor for block data model       |\n|  ====================================================*/\n\nclass Block {\n  constructor(data){\n    this.height = '';\n    this.timeStamp = '';\n    this.data = data;\n    this.previousHash = '0x';\n    this.hash = '';\n  }\n}\n\n/* ===== Blockchain ===================================\n|  Class with a constructor for blockchain data model  |\n|  with functions to support:                          |\n|     - createGenesisBlock()                           |\n|     - getLatestBlock()                               |\n|     - addBlock()                                     |\n|     - getBlock()                                     |\n|     - validateBlock()                                |\n|     - validateChain()                                |\n|  ====================================================*/\n\nclass Blockchain{\n    constructor(){\n      // new chain array\n      this.chain = [];\n      // add first genesis block\n      this.addBlock(this.createGenesisBlock());\n   }\n\n  createGenesisBlock(){\n    return new Block(\"First block in the chain - Genesis block\");\n  }\n\n// addBlock method\n  addBlock(newBlock){\n    if (this.chain.length>0) {\n      // previous block hash\n      newBlock.previousHash = this.chain[this.chain.length-1].hash;\n    }\n    // SHA256 requires a string of data\n    newBlock.hash = SHA256(JSON.stringify(newBlock)).toString();\n    // add block to chain\n    this.chain.push(newBlock);\n  }\n}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 663495,
          "key": "7699055d-0dd0-4261-b045-78eba3513315",
          "title": "Block Height and Timestamp",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7699055d-0dd0-4261-b045-78eba3513315",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 663983,
              "key": "af08af07-a278-45af-b8af-dd5048610f92",
              "title": "03.5 SC Block Height With Timestamp",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3n2TKw4_sIo",
                "china_cdn_id": "3n2TKw4_sIo.mp4"
              }
            },
            {
              "id": 664004,
              "key": "b275649b-548a-4e23-9dc1-44a706163399",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view5ae929b3",
              "pool_id": "webterminal",
              "view_id": "4e892c36-a67a-4474-a7ad-744a13f6b371",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 701801,
              "key": "97b8de01-b302-4c7e-98b5-36c48b7d3041",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Recap \n---\nTo recap, we modified our addBlock function to include block height within our newBlock object. In addition, we configure our newBlock object to include a timestamp in UTC format.\n\nIn `simpleChain.js`:\n\n```javascript\n/* ===== SHA256 with Crypto-js ===================================\n|  Learn more: Crypto-js: https://github.com/brix/crypto-js      |\n|  =============================================================*/\n\nconst SHA256 = require('crypto-js/sha256');\n\n/* ===== Block Class ===================================\n|  Class with a constructor for block data model       |\n|  ====================================================*/\n\nclass Block {\n  constructor(data){\n    this.height = '';\n    this.timeStamp = '';\n    this.data = data;\n    this.previousHash = '0x';\n    this.hash = '';\n  }\n}\n\n/* ===== Blockchain ===================================\n|  Class with a constructor for blockchain data model  |\n|  with functions to support:                          |\n|     - createGenesisBlock()                           |\n|     - getLatestBlock()                               |\n|     - addBlock()                                     |\n|     - getBlock()                                     |\n|     - validateBlock()                                |\n|     - validateChain()                                |\n|  ====================================================*/\n\nclass Blockchain{\n    constructor(){\n      // new chain array\n      this.chain = [];\n      // add first genesis block\n      this.addBlock(this.createGenesisBlock());\n  }\n\n  createGenesisBlock(){\n    return new Block(\"First block in the chain - Genesis block\");\n  }\n\n  // getLatest block method\n  getLatestBlock(){\n    return this.chain[this.chain.length -1];\n  }\n\n   // addBlock method\n  addBlock(newBlock){\n    // block height\n    newBlock.height = this.chain.length;\n    // UTC timestamp\n    newBlock.timeStamp = new Date().getTime().toString().slice(0,-3);\n    if (this.chain.length>0) {\n      // previous block hash\n      newBlock.previousHash = this.getLatestBlock().hash;\n    }\n    // SHA256 requires a string of data\n    newBlock.hash = SHA256(JSON.stringify(newBlock)).toString();\n    console.log(JSON.stringify(newBlock));\n    // add block to chain\n    this.chain.push(newBlock);\n  }\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 668264,
          "key": "e8a2e32f-821c-49e3-9f4e-788bf7217a91",
          "title": "Lesson Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e8a2e32f-821c-49e3-9f4e-788bf7217a91",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 669042,
              "key": "3e3f0dbd-8ab6-4b4b-adfe-ef4387e0d0f1",
              "title": "Lesson Recap",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YvK4L6mqxO0",
                "china_cdn_id": "YvK4L6mqxO0.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}