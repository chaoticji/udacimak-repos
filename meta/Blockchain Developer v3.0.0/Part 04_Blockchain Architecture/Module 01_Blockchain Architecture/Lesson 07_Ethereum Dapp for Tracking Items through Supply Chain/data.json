{
  "data": {
    "lesson": {
      "id": 565244,
      "key": "da5331bc-e6ae-4372-b18a-71fa7cc77b67",
      "title": "Ethereum Dapp for Tracking Items through Supply Chain",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn lower level components of establishing a sound web service architecture using Blockchain.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": null,
      "project": {
        "key": "d8dedb6f-c0d0-4fda-8d5d-c00a28588067",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 30240,
        "semantic_type": "Project",
        "title": "Ethereum Dapp for Tracking Items through Supply Chain",
        "description": "# Project Requirements\n---\nYour project will be evaluated using the [Project Rubric](https://review.udacity.com/#!/rubrics/1710/view). \nFor a project to pass, all criteria must *Meet Specifications*. Please thoroughly read through the rubric before beginning to build your project. \n\nBefore submitting your project, make sure you’ve included these files:\n\n* A project write-up (.txt, .doc, or .md) that includes:\n * The contract address\n * If libraries were used, include why these libraries were adopted. \n * If IPFS is used, include how IPFS is used in this project.\n * Program version numbers (*This information will help your reviewer troubleshoot your project if any issues arise*):\n * node version number\n * Truffle version number\n * web3 version number\n\n* Your project files\n\n* UML documents:\n * Activity\n * Sequence\n * State\n * Class (Data Model)",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "1710",
        "terminal_project_id": null,
        "resources": null,
        "image": {
          "url": "https://s3.amazonaws.com/video.udacity-data.com/topher/2018/September/5ba952dd_hero/hero.png",
          "width": 1200,
          "height": 900
        }
      },
      "lab": null,
      "concepts": [
        {
          "id": 785572,
          "key": "1bb0ed9a-3d28-4b48-bd8a-4baa305d2f77",
          "title": "Moving On",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1bb0ed9a-3d28-4b48-bd8a-4baa305d2f77",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 785573,
              "key": "7b32f564-01a8-4365-8077-88236b414f83",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Details\n---\nFor this project, you will creating a DApp supply chain solution backed by the Ethereum platform.  You will architect smart contracts that manage specific user permission controls as well as contracts that track and verify a product’s authenticity. \n\nTo help you develop such a DApp, we’ve outlined the parts needed below. We will cover these parts in the remainder of this project lesson. There is an _optional section if you would like an extra challenge, but note this is not required for the project to pass._ \n\n\n>| **Part 1** | Plan the project with write-ups|\n>|------------|-----------------------------------------------------------------------------------------|\n>| **Part 2** | Write smart contracts                                                     |\n>| **Part 3** | Test smart contract code coverage           |\n>| **Part 4** | Deploy smart contracts on a public test network (Rinkeby)     |\n>| **Part 5** | Modify client code to interact with smart contracts |\n>| **Optional** | Implement Infura to store product image                    |\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 785576,
          "key": "1c2c940f-ab4f-4806-95fa-14469abaa2d8",
          "title": "Part 1: Plan the project with write-ups",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1c2c940f-ab4f-4806-95fa-14469abaa2d8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 785577,
              "key": "e252cfb8-8c05-4048-89db-9f76db22bfb9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Part 1: Plan the project with write-ups\n---\nBefore starting any project, especially one with many parts, it’s important to anticipate any issues and ensure a smooth process down the road. \n\nYou will be creating a write-up that you will submit that has these requirements.\n\n>| **Requirement 1** | Project write-up - UML       |\n>|-------------------|----------------------------------------|\n>| **Requirement 2** | Project write-up - Libraries        |\n>| **Requirement 3** | Project write-up - IPFS    |\n\n",
              "instructor_notes": ""
            },
            {
              "id": 785581,
              "key": "f3fdeda0-a88f-49b5-847d-ec9e2afe10f3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f3fdeda0-a88f-49b5-847d-ec9e2afe10f3",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 785582,
              "key": "bfb9bd3f-fd72-4436-b6e8-ca83092870db",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For this projects a general write up to guide the reviewer should be provided. Additionally we are adding the following requirements. \n\n# Requirement 1: Project write-up - UML\n---\nThis part should be easy! Simply add in the diagrams you create in Part A of the project. If any changes were made during the contract creation beside to add those changes to your UML diagrams and add them to your write up. \n\n# Requirement 2: Project write-up - Libraries \n---\nIf libraries are used in the project, the project write-up indicates which libraries and discusses why these libraries were adopted. \n\n# Requirement 3: Project write-up - IPFS \n---\nIf IPFS is used, the project write-up discusses how IPFS is used in this project.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 785589,
          "key": "25b82382-c290-4289-8ac5-d948aad0a349",
          "title": "Part 2: Write smart contracts   ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "25b82382-c290-4289-8ac5-d948aad0a349",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 785590,
              "key": "49472497-1d81-4c7a-a7f1-255921771f4d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Part 2: Write smart contracts\n---\nIn order to create your supply chain DApp, you will need to properly manage user permissions and track a product’s authenticity. \n\nThe smart contract(s) you you build should have these requirements:\n\n>| **Requirement 1** | Define and implement interfaces |\n>|-------------------|----------------------------------------|\n>| **Requirement 2** |  Build out AccessControl Contracts     |\n>| **Requirement 3** | Build out Base Contract    |\n>| **Requirement 4** | Build out Core Contract  |\n\n",
              "instructor_notes": ""
            },
            {
              "id": 785591,
              "key": "772e323a-8abb-4e22-bfc8-ff928f670dd0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/772e323a-8abb-4e22-bfc8-ff928f670dd0",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 785592,
              "key": "30c33eee-e964-4478-8e99-4bde2d043fc8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Requirement 1: Define and implement required interfaces\n---\nFirst, download the provided [starter code](https://github.com/udacity/nd1309-Project-6b-Example-Template) and review all the files. Add in any interfaces you use. \n\n> [Download Starter Code ](https://github.com/udacity/nd1309-Project-6b-Example-Template)\n\nThe starter code contains a skeleton for the smart contracts, test file, and migration files you will need to build out. Since there will be quite a bit of specialized logic, the code is split into smaller contracts that bundle related code together. The subcontract inheritance looks like this:\n\n```\ncontract AccessControl\ncontract Base is AccessControl\ncontract Core is Base\n```\n* **AccessControl - Collection of Contracts: ** These contracts manages the various addresses and constraints for operations that can be executed only by specific roles. \n\n* **Base - SupplyChain.sol: ** This is where we define the most fundamental code shared throughout the core functionality. This includes our main data storage, constants and data types, plus internal functions for managing these items.\n\n* **Core - Ownable.sol: ** is the contract that controls ownership and transfer of ownership.\n",
              "instructor_notes": ""
            },
            {
              "id": 785593,
              "key": "75472a57-934e-4910-aca7-12634022111f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/75472a57-934e-4910-aca7-12634022111f",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 785594,
              "key": "da5ddcfd-97d4-4fab-a4d0-7ff265057315",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Requirement 2: Build out AccessControl Contracts\n---\nFrom the Starter Code, the files in `coffeeaccesscontrol` controls access control for each actor. \n\nBuild out these contracts so that each actor’s role in your supply chain is distinct with no overlap in their access abilities. The abilities listed for each role are exhaustive. \n\nExample of 4 actors in a coffee supply chain are:\n\n* *Farmer*: The Farmer can harvest coffee beans, process coffee beans, pack coffee palettes, add coffee palettes, ship coffee palettes, and track authenticity. \n* *Distributor*: The Distributor can buy coffee palettes and track authenticity.\n* *Retailer*: The Retailer can receive coffee palettes and track authenticity. \n* *Consumer*: The consumer can buy coffee palettes and track authenticity. \n",
              "instructor_notes": ""
            },
            {
              "id": 785595,
              "key": "77afe702-632f-48d9-9245-25831fc17f02",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/77afe702-632f-48d9-9245-25831fc17f02",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 785596,
              "key": "c32e2df5-6837-4536-ba46-8b47a7184315",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Requirement 3: Build out Base Contract\n---\nFrom the Starter Code, **SupplyChain.sol** contract holds all common structs, events and base variables. \n\nThis smart contract must implement functions that track:\n\n- Product ID\n- Product UPC\n- Origination Information \n- Origin Actor (e.g. Farmer ID, Farmer Name, )\n- Misc. organization information (e.g. Farmer Information)\n- Longitude and Latitude of Origin Coordinates (e.g. Farm’s Longitude and Latitude)\n- Product notes\n- Product price",
              "instructor_notes": ""
            },
            {
              "id": 785599,
              "key": "963eadde-dfff-46ef-b370-760dee7f7436",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/963eadde-dfff-46ef-b370-760dee7f7436",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 785600,
              "key": "6d303061-bcef-46c3-8d8b-1832fab37b2e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Requirement 4: Build out Core Contract\n---\nOwnable.sol is the contract that controls ownership and transfer of ownership.\n\nThis Core Contract must implement:\n* **Ownable** - <TBD define> Define an owner for all the contracts. \n* **Secondary** - <TBD define> Allows contract to be transferred owners. \n\nThis has been provided in the starter code. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 785601,
          "key": "2b23cfb4-c6e2-4fb7-815e-19c3144a799f",
          "title": "Part 3: Test smart contract code coverage",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2b23cfb4-c6e2-4fb7-815e-19c3144a799f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 785602,
              "key": "d102d5cd-8834-421a-968d-24b486823944",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Part 3: Test smart contract code coverage\n---\n\n# Requirement: Smart contract has associated tests\n---\nFor this project, as with any project, make sure to test your smart contracts to ensure they are working properly in different situations without any risk. ",
              "instructor_notes": ""
            },
            {
              "id": 785604,
              "key": "314ebddb-969c-4ce1-9b7c-837a8a830cbb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/314ebddb-969c-4ce1-9b7c-837a8a830cbb",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 785603,
              "key": "c7008542-7c7a-41ca-99f0-b5e707addb5a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Requirement: Smart contract has associated tests\n---\nAt minimum, test every function for every function you implemented from your Sequence Diagram. For example, from this Sequence Diagram we would need to test 10 functions:\n* harvestItem()\n* processItem()\n* packItem()\n* addItem()\n* buyItem()\n* shiptItem()\n* receiveItem()\n* purchaseItem()\n* fetchItemBufferOne()\n* fetchItemBufferTwo()\n",
              "instructor_notes": ""
            },
            {
              "id": 785605,
              "key": "e5b84699-2340-4510-9f2f-f1882925d6e3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/November/5bfc9c37_screen-shot-2018-11-26-at-5.16.19-pm/screen-shot-2018-11-26-at-5.16.19-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e5b84699-2340-4510-9f2f-f1882925d6e3",
              "caption": "",
              "alt": "",
              "width": 1164,
              "height": 1004,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 785606,
          "key": "13967155-9705-4118-9bb4-9abcfeb13288",
          "title": "Part 4: Deploy smart contracts on public test network",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "13967155-9705-4118-9bb4-9abcfeb13288",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 785607,
              "key": "b0f06a87-349a-4ead-a455-ac042d4e46ab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Once your smart contract is created, it’s time to go live! For this project, deploy your smart contract on the Ethereum *RINKEBY* test network. \n\n\n>| **Requirement 1** | Deploy smart contract on a public test network |\n>|-------------------|----------------------------------------|\n>| **Requirement 2** |  Submit Transaction hash, contract hash, and contract address      |\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 785608,
              "key": "a6418512-ef75-4c81-b5ac-8c0ff8ee31c5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a6418512-ef75-4c81-b5ac-8c0ff8ee31c5",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 785609,
              "key": "0c3d251d-3b2e-44be-843a-87e070d4af95",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Requirement 1: Deploy smart contract on a public test network\n---\nUsing Truffle framework, deploy your smart contract with the Rinkeby test network. Take note of your contract hash and address after successful deployment.\n\n _Tip: Refer to Infura screencast for assistance on deploying your smart contract with Infura and Truffle._\n",
              "instructor_notes": ""
            },
            {
              "id": 785610,
              "key": "77b50121-7915-4081-b423-46a6850e4434",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/77b50121-7915-4081-b423-46a6850e4434",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 785611,
              "key": "8b5bd25b-ce8b-4482-b827-b80f7f0c6ebf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Requirement 2: Submit Contract Address\n---\nProvide a document with your project submission that includes the contract address. \n\nDocument for your project must be in either \".txt\" or \".md\" format.\n\n*Hint:* You can view the Contract address using a blockchain explorer (e.g. Etherscan).\n\nExample of a random Contract address on the Rinkeby test network : https://rinkeby.etherscan.io/address/0xfb0720c0715e68f80c0c0437c9c491abfed9e7ab#code\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 785612,
          "key": "4eeb9907-579f-4548-872f-d88d9308e6e2",
          "title": "Part 5: Modify client code to interact with smart contracts",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4eeb9907-579f-4548-872f-d88d9308e6e2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 785613,
              "key": "389e359a-3db9-41a8-8d83-559e5fddd179",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Part 5: Modify client code to interact with smart contract\n---\nCreate the frontend that allows your users to interact with your DApp. This should be a simple and clean frontend that manages product lifecycle as the product navigates down the supply chain.\n\nUsing javascript, create a single JS file with all web3 functions that allows your client code to interact with you smart contracts. \n\nThe coffee example in the boilerplate provides this code for you. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 785614,
              "key": "4958d680-af36-4a2b-88fb-18574d9e16e8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b86cf3e_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4958d680-af36-4a2b-88fb-18574d9e16e8",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 785615,
              "key": "4f6484d6-45ed-47b9-8cc9-6ee0a79c3ba5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Requirement: Configure client code for each actor\n---\nFront-end is configured to:\n* 1) Submit a product for shipment (farmer to the distributor, distributor to retailer, etc).\n* 2) Receive product from shipment.\n* 3) Validate the authenticity of the product.\n\nFrontend code can be downloaded and executed from a local environment.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 787332,
          "key": "040822d6-eb6a-4176-9495-339335543a67",
          "title": "Optional: Implement Infura to store product image",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "040822d6-eb6a-4176-9495-339335543a67",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 787333,
              "key": "2e6a2074-89da-4c46-b4cc-49b7928083ab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Optional:  Implement Infura to store product image \n---\n\n**NOTE:** This section is not required for your project to pass. These steps are purely optional and a way for you to expand on your project. \n\nUsing your previous coursework experience, modify your DApp to allow the initial producer in the supply chain to upload an image of the product along with the UPC hash and store this image using Infura. \n\nConsider including 2 methods - upload() and read()\n\n<Include extra info about the user’s workflow and extra material of how to build this.>\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}