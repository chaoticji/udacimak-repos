{
  "data": {
    "lesson": {
      "id": 791124,
      "key": "4c7d5809-b6e3-4f13-aec8-db32bb7ab777",
      "title": "Supply Chains with Smart Contracts",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn to build smart contract solution for supply chain using lemonade stand as an example.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/4c7d5809-b6e3-4f13-aec8-db32bb7ab777/791124/1548816363897/Supply+Chains+with+Smart+Contracts+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/4c7d5809-b6e3-4f13-aec8-db32bb7ab777/791124/1548816360030/Supply+Chains+with+Smart+Contracts+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 791137,
          "key": "1a40d6dd-c975-4653-9086-0b057ef05c0a",
          "title": "Lesson Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1a40d6dd-c975-4653-9086-0b057ef05c0a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 814315,
              "key": "11084174-49da-4fce-a52c-6e0f50050e60",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Hey and welcome to this lesson on smart contracts for supply chain management!\n\nIn this lesson, we’ll go over how smart contracts can work as an extremely valuable resource for the management of supply chains.\n\nBy supply chains, we mean all the processes involved with the production and distribution of a commodity. \n\nThese systems can be extremely large and complex. They allow us to understand interactions between suppliers, customers, and companies. This is true whether it’s for a local hardware store, or for worldwide distribution of crops, music, clothing, or any other product or service you can think of. \n\nSupply chains and Smart Contracts are a perfect match, and throughout this lesson you’ll learn all about them.\n\nIn this lesson we'll go overall  simple supply chain example using a local lemonade stand. We’ll go over the thought process for how you’ll outline and diagram the needs of the supply chain, and from there you’ll start programming a supply chain smart contract using solidity.\n\nYou’ll apply what you know about Solidity in interesting new ways, and by the end you’ll be asked to complete a few challenges on your own. \n\nI’m really excited to show you these new ideas, so I hope you’re ready to get started with this lesson on smart contracts for supply chain management. \n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 791139,
          "key": "08b6df97-d338-4e30-a6f4-fdc38475c86c",
          "title": "Diagram a Basic Supply Chain",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "08b6df97-d338-4e30-a6f4-fdc38475c86c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791168,
              "key": "433bcab9-c63f-44df-a285-73b24fee724e",
              "title": "Diagram A Basic Supply Chain",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "zPTMbdypm1M",
                "china_cdn_id": "zPTMbdypm1M.mp4"
              }
            }
          ]
        },
        {
          "id": 791140,
          "key": "ec2757cb-82a1-41ce-bee8-a7255cadd65b",
          "title": "Smart Contract Structure",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ec2757cb-82a1-41ce-bee8-a7255cadd65b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791169,
              "key": "50eb28c6-c801-41c0-ba98-dedca74af522",
              "title": "C5 L2 Smart Contract Structure",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "B0t2Ov0ehmA",
                "china_cdn_id": "B0t2Ov0ehmA.mp4"
              }
            },
            {
              "id": 814529,
              "key": "1b9ed945-648b-468f-9e03-d203889606a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Resources: #\n\nhttps://remix.ethereum.org/",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 791141,
          "key": "63cb5064-fa79-427e-8cce-487c6b8c8efe",
          "title": "Setup, Variables, Mappings, and Structs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63cb5064-fa79-427e-8cce-487c6b8c8efe",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791170,
              "key": "53f4ab72-742f-47f9-b518-f34709b731be",
              "title": "C5 L2 Set Up Variables",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "BfGnrZqsBUc",
                "china_cdn_id": "BfGnrZqsBUc.mp4"
              }
            },
            {
              "id": 813491,
              "key": "86b7a0b0-ffce-413c-8dfd-b26cbd2b1913",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0ae353_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/86b7a0b0-ffce-413c-8dfd-b26cbd2b1913",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 813485,
              "key": "deca93d9-8787-4b95-b600-0a103f1e4724",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Resources\n---\n[Link - Types](https://solidity.readthedocs.io/en/v0.4.21/types.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 791142,
          "key": "acffa11f-41bd-4027-b7ae-44be8d96c16d",
          "title": "Events and States",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "acffa11f-41bd-4027-b7ae-44be8d96c16d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791174,
              "key": "2a1943ea-91d6-432e-b610-747b8a89064d",
              "title": "C5 L2  Events",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DxXDcWOKFzM",
                "china_cdn_id": "DxXDcWOKFzM.mp4"
              }
            },
            {
              "id": 791178,
              "key": "9efdd8bc-1824-4e68-8c02-a8bee68e40de",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0acc11_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9efdd8bc-1824-4e68-8c02-a8bee68e40de",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 791177,
              "key": "c4433e51-5789-4d9b-805a-6923be11c6e4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Resources\n---\n\n[Link - Common Patterns](https://solidity.readthedocs.io/en/v0.4.24/common-patterns.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 814319,
          "key": "1bdc8c2e-e3bb-47e7-a1ae-64417b42865c",
          "title": "Modifiers",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1bdc8c2e-e3bb-47e7-a1ae-64417b42865c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 814336,
              "key": "031ca383-3310-437a-9958-447b82f0ae35",
              "title": "C5 L2 Modifiers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "VsUv6-sRGz8",
                "china_cdn_id": "VsUv6-sRGz8.mp4"
              }
            }
          ]
        },
        {
          "id": 791143,
          "key": "9a63b9a4-a133-4d2a-b3ff-12901e68a295",
          "title": "Functions: Constructor + Add Item",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9a63b9a4-a133-4d2a-b3ff-12901e68a295",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791245,
              "key": "a6bd0100-cbad-4d85-b672-d5ac07360e11",
              "title": "C5 L2 Constructor Add Item",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "JuaSZrTwWS4",
                "china_cdn_id": "JuaSZrTwWS4.mp4"
              }
            },
            {
              "id": 791247,
              "key": "c394944f-0b2a-402a-b3d6-644aadb9b5f3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0acd07_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c394944f-0b2a-402a-b3d6-644aadb9b5f3",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 791246,
              "key": "11ff7853-38c2-4bae-b4f9-20761711ecb5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Resources\n---\n\n[Article - ‘emit’ keyword in Solidity] (https://medium.com/@aniketengg/emit-keyword-in-solidity-242a679b0e1a) ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 791144,
          "key": "caa10e35-3383-4048-8a57-d1211e3c65c7",
          "title": "Function: Buy Item",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "caa10e35-3383-4048-8a57-d1211e3c65c7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791248,
              "key": "75e86a01-b51d-42a3-af63-01797e159ab1",
              "title": "C5 L2 Buying Item",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "F00FVfsPa_g",
                "china_cdn_id": "F00FVfsPa_g.mp4"
              }
            }
          ]
        },
        {
          "id": 791145,
          "key": "8f20ef43-2f5c-4639-8ec6-514b144d9121",
          "title": "Function: Fetch Item",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8f20ef43-2f5c-4639-8ec6-514b144d9121",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791249,
              "key": "de883263-822d-48c9-820a-3970bb172d42",
              "title": "C5 L2 Fetch Item",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tDp1wzbugts",
                "china_cdn_id": "tDp1wzbugts.mp4"
              }
            }
          ]
        },
        {
          "id": 791146,
          "key": "5a86eebc-de23-49f6-9c86-d8515be4ba6a",
          "title": "Remix Demonstration",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5a86eebc-de23-49f6-9c86-d8515be4ba6a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791252,
              "key": "4d8276ca-4254-47d3-9dcc-84371c3364e2",
              "title": "C5 L2 Deploy",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "PZJB3kLg-RU",
                "china_cdn_id": "PZJB3kLg-RU.mp4"
              }
            },
            {
              "id": 814331,
              "key": "fe6c4dca-87ce-4d1b-9d68-d090d3b7c008",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/December/5c0ae353_blockchain-line/blockchain-line.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fe6c4dca-87ce-4d1b-9d68-d090d3b7c008",
              "caption": "",
              "alt": "",
              "width": 75,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 814332,
              "key": "a535e2c7-01e4-42b2-b58a-2c9f7c63e7e6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```\npragma solidity ^0.4.24;\n\n// Define a contract 'Lemonade Stand'\ncontract LemonadeStand {\n\n    // Variable: Owner\n    address owner;\n\n    // Variable: SKU count\n    uint skuCount;\n\n    // Event: 'State' with value 'ForSale'\n    enum State { ForSale, Sold }\n\n    // Struct: Item. name, sku, price, state, seller, buyer\n    struct Item {\n        string  name;\n        uint  sku;\n        uint  price;\n        State  state;\n        address  seller;\n        address  buyer;\n    }\n\n    // Define a public mapping 'items' that maps the SKU (a number) to an Item.\n    mapping (uint => Item) items;\n\n    // Events\n    event ForSale(uint skuCount);\n    event Sold(uint sku);\n\n    // Modifier: Only Owner see if msg.sender == owner of the contract\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    // Define a modifier that verifies the Caller\n    modifier verifyCaller (address _address) {\n        require(msg.sender == _address);\n        _;\n    }\n\n    // Define a modifier that checks if the paid amount is sufficient to cover the price\n    modifier paidEnough(uint _price) {\n        require(msg.value >= _price);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a sku is ForSale\n    modifier forSale(uint _sku) {\n        require(items[_sku].state == State.ForSale);\n        _;\n    }\n\n    // Define a modifier that checks if an item.state of a sku is Sold\n    modifier sold(uint _sku) {\n        require(items[_sku].state == State.Sold);\n        _;\n    }\n\n    constructor() public payable {\n        owner = msg.sender;\n        skuCount = 0;\n    }\n\n    function addItem(string _name, uint _price) onlyOwner public {\n        // Increment sku\n        skuCount = skuCount + 1;\n\n        // Emit the appropriate event\n        emit ForSale(skuCount);\n\n        // Add the new item into inventory and mark it for sale\n        items[skuCount] = Item({name: _name, sku: skuCount, price: _price, state: State.ForSale, seller: msg.sender, buyer: 0});\n    }\n\n    function buyItem(uint sku) forSale(sku) paidEnough(items[sku].price) public payable{\n        address buyer = msg.sender;\n        uint price = items[sku].price;\n\n        // Update Buyer\n        items[sku].buyer = buyer;\n\n        // Update State\n        items[sku].state = State.Sold;\n\n        // Transfer money to seller\n        items[sku].seller.transfer(price);\n\n        // Emit the appropriate event\n        emit Sold(sku);\n    }\n\n    function fetchItem(uint _sku) public view returns (string name, uint sku, uint price, string stateIs, address seller, address buyer) {\n        uint state;\n        name = items[_sku].name;\n        sku = items[_sku].sku;\n        price = items[_sku].price;\n        state = uint(items[_sku].state);\n\n        if( state == 0) {\n            stateIs = \"For Sale\";\n        }\n\n        if( state == 1) {\n            stateIs = \"Sold\";\n        }\n\n        seller = items[_sku].seller;\n        buyer = items[_sku].buyer;\n    }\n\n}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 722535,
          "key": "42218c0d-8f55-49c6-b0b5-e028da765d2e",
          "title": "Challenge: Extend the Supply Chain",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "42218c0d-8f55-49c6-b0b5-e028da765d2e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 722596,
              "key": "fe849630-036a-4444-a273-2bf5971aae72",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Challenge: Extending the Supply Chain\n___\n\nAt this point you’ve created an entire supply chain from scratch for a simple lemonade stand. This is a great start and it provides an excellent framework from which you can build more complex supply chains.\n\nIn this section you’ll do exactly that!\n\nUsing the same ideas from earlier in this lesson, you’ll add in a few new features to your smart contract that help track even more details of the products you sell.\n\nHere’s a look at a new diagram that includes the added details.\n\n# Objectives\n___\n\n*Our goal is to help you do the following things.*\n",
              "instructor_notes": ""
            },
            {
              "id": 722600,
              "key": "1988d88c-5e10-481e-b34c-8500a4952821",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5ba5751b_screen-shot-2018-09-21-at-3.47.39-pm/screen-shot-2018-09-21-at-3.47.39-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1988d88c-5e10-481e-b34c-8500a4952821",
              "caption": "",
              "alt": "",
              "width": 1081,
              "height": 609,
              "instructor_notes": null
            },
            {
              "id": 722597,
              "key": "f22fac17-0aff-46b4-82b1-103cb4d7f1da",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As you can see, this supply chain includes a new function shipItem.\n\nYou challenge is to extend the smart contract to include each of these new features. You can use Remix to help create any new code needed to create your version of the extended contract.\n\n[Remix](https://remix.ethereum.org )\n\nOnce completed, owners should have the ability to ship an item that has been sold. \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 722603,
          "key": "56e786fc-5dde-4e9f-a77c-71f3e4fa13ac",
          "title": "Solution: Extending the Supply Chain",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "56e786fc-5dde-4e9f-a77c-71f3e4fa13ac",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 722604,
              "key": "a800d7df-a944-4819-95f7-1ed0e318454d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Extending the Supply Chain\n___\n\nHere is the solution we used to add the ship item function to our contract.\n\n    // Define a function 'shipItem' that allows the seller to change the state to 'Shipped'\n    function shipItem(uint sku) public\n        // Call modifier to check if the item is sold\n        sold(sku)\n        // Call modifier to check if the invoker is seller\n        verifyCaller(items[sku].seller) {\n        // Update state\n        items[sku].state = State.Shipped;\n        // Emit the appropriate event\n        emit Shipped(sku);",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 722536,
          "key": "128a5bf2-e8c9-4981-9288-17adc66bad03",
          "title": "Challenge: Give a Refund",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "128a5bf2-e8c9-4981-9288-17adc66bad03",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 722605,
              "key": "845f7746-6a44-4488-8e2c-dad287a581e8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Challenge: Give a Refund\n___\n\nCustomers are loving the transparency of your Lemonade stand! They’re really taking advantage of the ability to have lemonade shipped to their local parties. There’s just one HUGE problem that’s affecting your reputation. \n\nCurrently there is no way for your customers to get change for their purchases. They either need to give you the exact amount, or they get cheated out of any extra money they give you. This is unacceptable and it’s up to you to fix this. \n",
              "instructor_notes": ""
            },
            {
              "id": 722606,
              "key": "1c7f0273-18c6-4800-922a-2a27759a54e6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5ba57600_screen-shot-2018-09-21-at-3.51.32-pm/screen-shot-2018-09-21-at-3.51.32-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1c7f0273-18c6-4800-922a-2a27759a54e6",
              "caption": "",
              "alt": "",
              "width": 1081,
              "height": 609,
              "instructor_notes": null
            },
            {
              "id": 722607,
              "key": "74447455-70d9-438d-a64b-19875b9e7ff1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The Challenge\n___\n\nGiven the current contract, your challenge is to add the ability to check the value your customer has sent you, and to transfer any extra money given back into their account. This functionality should be made available at the time of purchase. \n\nWhen you are done, check the solution we came up with to see one possible solution to this challenge.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 722608,
          "key": "bfdcc2bb-fce5-411a-a815-517c4cf4925d",
          "title": "Solution: Give a Refund",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bfdcc2bb-fce5-411a-a815-517c4cf4925d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 722609,
              "key": "ae816a22-03e2-42fc-843c-9d1e464a3ea1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Give a Refund\n___\n\nHere is one possible solution to add the functionality needed to give a refund to your contract.\n\n    // Define a modifier that checks the price and refunds the remaining balance\n    modifier checkValue(uint _sku) {\n        _;\n        uint _price = items[_sku].price;\n        uint amountToRefund = msg.value - _price;\n        items[_sku].buyer.transfer(amountToRefund);\n    }\n    \n    // Define a function 'buyItem' that allows one to purchase an item from the inventory\n    function buyItem(uint sku) public payable\n        // Call modifier to check if sku is for sale\n        forSale(sku)\n        // Call modifer to check if buyer has paid enough\n        paidEnough(items[sku].price)\n        // Call modifer to send any excess ether back to buyer\n        checkValue(sku) {\n        address buyer = msg.sender;\n        uint  price = items[sku].price;\n        // Update buyer\n        items[sku].buyer = buyer;\n        // Update state\n        items[sku].state = State.Sold;\n        // Transfer money to seller\n        items[sku].seller.transfer(price);\n        // emit the appropriate event\n        emit Sold(sku);\n        }\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 791149,
          "key": "98441ae6-fdc3-4205-94ef-05199f34b33a",
          "title": "Lesson Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "98441ae6-fdc3-4205-94ef-05199f34b33a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791259,
              "key": "f9c36474-783e-4d1e-9102-530dccd2e17a",
              "title": "Lesson Recap",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iL1aHHS96fo",
                "china_cdn_id": "iL1aHHS96fo.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}